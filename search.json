[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dynr Wiki",
    "section": "",
    "text": "This website serves as a Wiki for consolidating documentation, knowledge bases, and other relevant information pertaining to the dynr package. The intention is not to supplant existing sources of information, for example, https://CRAN.R-project.org/package=dynr and https://github.com/mhunter1/dynr, but to supplement them.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/intro/intro.html",
    "href": ".setup/quarto/intro/intro.html",
    "title": "dynr: Dynamic Models with Regime-Switching",
    "section": "",
    "text": "Description\nIntensive longitudinal data have become increasingly prevalent in various scientific disciplines. Many such data sets are noisy, multivariate, and multi-subject in nature. The change functions may also be continuous, or continuous but interspersed with periods of discontinuities (i.e., showing regime switches). The package dynr (Dynamic Modeling in R) is an R package that implements a set of computationally efficient algorithms for handling a broad class of linear and nonlinear discrete- and continuous- time models with regime-switching properties under the constraint of linear Gaussian measurement functions. The discrete-time models can generally take on the form of a state-space or difference equation model. The continuous-time models are generally expressed as a set of ordinary or stochastic differential equations. All estimation and computations are performed in C, but users are provided with the option to specify the model of interest via a set of simple and easy-to-learn model specification functions in R. Model fitting can be performed using single-subject time series data or multiple-subject longitudinal data. Ou et al. (2019) provided a detailed introduction to the interface and more information on the algorithms.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>dynr: Dynamic Models with Regime-Switching</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/intro/intro.html#cran",
    "href": ".setup/quarto/intro/intro.html#cran",
    "title": "dynr: Dynamic Models with Regime-Switching",
    "section": "CRAN",
    "text": "CRAN\nThe Comprehensive R Archive Network (CRAN) release of the dynr package is available at https://CRAN.R-project.org/package=dynr.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>dynr: Dynamic Models with Regime-Switching</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/intro/intro.html#github",
    "href": ".setup/quarto/intro/intro.html#github",
    "title": "dynr: Dynamic Models with Regime-Switching",
    "section": "GitHub",
    "text": "GitHub\nThe development version of the dynr package is available at https://github.com/mhunter1/dynr.\n\n\n\n\nOu, L., Hunter, M. D., & Chow, S.-M. (2019). What’s for dynr: A package for linear and nonlinear dynamic modeling in R. The R Journal, 11(1), 91. https://doi.org/10.32614/rj-2019-012",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>dynr: Dynamic Models with Regime-Switching</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html",
    "href": ".setup/quarto/docker/docker-win.html",
    "title": "Windows using WSL 2",
    "section": "",
    "text": "Installation Video Tutorial\nClick here for a video tutorial of the installation process.",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Windows using WSL 2</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#installing-windows-subsystem-for-linux-wsl",
    "href": ".setup/quarto/docker/docker-win.html#installing-windows-subsystem-for-linux-wsl",
    "title": "Windows using WSL 2",
    "section": "Installing Windows Subsystem for Linux (WSL)",
    "text": "Installing Windows Subsystem for Linux (WSL)\n\nSearch for PowerShell or Command Prompt. Right click to run as an administrator, then type the following:\n\nwsl --install --distribution Ubuntu\n\n\n\n\n\n\n\nNote\n\n\n\nThere are times when the operating system requires a restart. After restarting, when the installation is successful, a new application Ubuntu will be available. Launch this application to continue.\n\n\n\nWhen prompted:\n\nEnter new UNIX username:\nNew password:\nRetype new password:\n\nYou should see a prompt similar to the following which indicates that you are inside the newly installed Ubuntu instance. In the prompt, type exit to exit Ubuntu.\n\nUSER@HOST:~$\n\nYou might need to update the kernel. You can do this with the following:\n\nDownload the Linux kernel update package from https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\nDouble-click wsl_update_x64.msi to update the kernel.\n\nA system restart might be a good idea for all the changes to take effect.\n\nIf the above instructions fail, you might be using an older version of Windows. See https://learn.microsoft.com/en-us/windows/wsl/install-manual for more details on how to manually install WSL.",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Windows using WSL 2</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#installing-docker-desktop",
    "href": ".setup/quarto/docker/docker-win.html#installing-docker-desktop",
    "title": "Windows using WSL 2",
    "section": "Installing Docker Desktop",
    "text": "Installing Docker Desktop\n\nDownload the the appropriate Docker Desktop for Windows from https://www.docker.com/products/docker-desktop/.\nDouble-click Docker Desktop Installer.exe to install Docker Desktop.\nLaunch Docker Desktop.\n\nClick the Accept button to accept the terms of service to continue.\nYou may continue without creating an account or signing in.",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Windows using WSL 2</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#running-the-dynr-docker-container",
    "href": ".setup/quarto/docker/docker-win.html#running-the-dynr-docker-container",
    "title": "Windows using WSL 2",
    "section": "Running the dynr Docker Container",
    "text": "Running the dynr Docker Container\n\nLaunch Docker Desktop.\nIn PowerShell, type the following to pull the latest Docker image:\n\ndocker pull jeksterslab/dynr-rocker:latest\n\nIn PowerShell, type the following to launch Rstudio Server1:\n\ndocker run --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\n\nOpen http://localhost:8787 on your web browser to launch Rstudio Server.\n\nusername: rstudio\npassword: yourpassword2",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Windows using WSL 2</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#footnotes",
    "href": ".setup/quarto/docker/docker-win.html#footnotes",
    "title": "Windows using WSL 2",
    "section": "",
    "text": "Note for developers only: Replace jeksterslab/dynr-rocker with jeksterslab/dynr-arma-rocker to use the arma branch.↩︎\nYou can change the password by replacing yourpassword in PASSWORD=yourpassword.↩︎",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Windows using WSL 2</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html",
    "href": ".setup/quarto/docker/docker-mac.html",
    "title": "macOS",
    "section": "",
    "text": "Installation Video Tutorial\nClick here for a video tutorial of the installation process.",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>macOS</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html#installing-docker-desktop",
    "href": ".setup/quarto/docker/docker-mac.html#installing-docker-desktop",
    "title": "macOS",
    "section": "Installing Docker Desktop",
    "text": "Installing Docker Desktop\n\n\nDownload the the appropriate Docker Desktop for macOS (Intel Chip vs. Apple Chip) from https://www.docker.com/products/docker-desktop/.\nDouble-click Desktop.dmg to install Docker Desktop.\nDrag Docker.app to the Applications folder.\nLaunch Docker from the Launchpad.\n\nChoose Use recommended settings (requires password) and provide your macOS user password.\nClick the Accept button to accept the terms of service to continue.\nYou may continue without creating an account or signing in.",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>macOS</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html#running-the-dynr-docker-container",
    "href": ".setup/quarto/docker/docker-mac.html#running-the-dynr-docker-container",
    "title": "macOS",
    "section": "Running the dynr Docker Container",
    "text": "Running the dynr Docker Container\n\nLaunch Docker Desktop.\nOn your macOS terminal, type the following to pull the latest Docker image:\n\ndocker pull jeksterslab/dynr-rocker:latest\n\nOn your macOS terminal, type the following to launch Rstudio Server1:\n\ndocker run --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\n\nOpen http://localhost:8787 on your web browser to launch Rstudio Server.\n\nusername: rstudio\npassword: yourpassword2",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>macOS</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html#footnotes",
    "href": ".setup/quarto/docker/docker-mac.html#footnotes",
    "title": "macOS",
    "section": "",
    "text": "Note for developers only: Replace jeksterslab/dynr-rocker with jeksterslab/dynr-arma-rocker to use the arma branch.↩︎\nYou can change the password by replacing yourpassword in PASSWORD=yourpassword.↩︎",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>macOS</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-image-container-tag.html#footnotes",
    "href": ".setup/quarto/docker/docker-image-container-tag.html#footnotes",
    "title": "Docker Images, Containers, and Tags",
    "section": "",
    "text": "Docker Hub is the remote repository of the dynr Docker images. A Docker Hub account is not required to use the dynr Docker images in Docker Hub. However, an account is required to view details of the dynr docker images.↩︎",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Docker Images, Containers, and Tags</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker-volumes.html",
    "href": ".setup/quarto/docker/docker-volumes.html",
    "title": "Docker Volumes",
    "section": "",
    "text": "By default files created inside the Docker container does not persist when the container is stopped. We can mount a persistent volume on your Docker container using the -v flag. The idea here is that Docker maps a volume of the local host machine to a volume inside the Docker container. Let’s say we have a folder dynr_project inside the local Documents folder. We can mount that volume using the following for Windows\ndocker run -v C:\\Users\\user\\Documents\\dynr_project:/home/rstudio/working-dir --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\nand for mac\ndocker run -v /Users/username/Documents/dynr_project:/home/rstudio/working-dir --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\nThe directory on the left size of the colon is an existing directory on the host machine that the current user has read and write access to. The directory on the right side of the colon is the default working directory inside the Docker container. If you make changes inside the Docker container on files inside /home/rstudio/working-dir, the changes will persist on the mounted dynr_project folder. If you make changes in the dynr_project folder, they will be reflected on /home/rstudio/working-dir of the currently running container.",
    "crumbs": [
      "dynr Docker Container",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Docker Volumes</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/lin-growth.html",
    "href": ".setup/quarto/examples/lin-growth.html",
    "title": "The Linear Growth Curve Model",
    "section": "",
    "text": "Model\nThe measurement model is given by \\[\\begin{equation}\n  Y_{i, t}\n  =\n  \\left(\n  \\begin{array}{cc}\n    1 & 0 \\\\\n  \\end{array}\n  \\right)\n  \\left(\n  \\begin{array}{c}\n    \\eta_{0_{i, t}} \\\\\n    \\eta_{1_{i, t}} \\\\\n  \\end{array}\n  \\right)\n  +\n  \\boldsymbol{\\varepsilon}_{i, t},\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\boldsymbol{\\varepsilon}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  0,\n  \\theta\n  \\right)\n\\end{equation}\\] where \\(Y_{i, t}\\), \\(\\eta_{0_{i, t}}\\), \\(\\eta_{1_{i, t}}\\), and \\(\\boldsymbol{\\varepsilon}_{i, t}\\) are random variables and \\(\\theta\\) is a model parameter. \\(Y_{i, t}\\) is the observed random variable at time \\(t\\) and individual \\(i\\), \\(\\eta_{0_{i, t}}\\) (intercept) and \\(\\eta_{1_{i, t}}\\) (slope) form a vector of latent random variables at time \\(t\\) and individual \\(i\\), and \\(\\boldsymbol{\\varepsilon}_{i, t}\\) a vector of random measurement errors at time \\(t\\) and individual \\(i\\). \\(\\theta\\) is the variance of \\(\\boldsymbol{\\varepsilon}\\).\nThe dynamic structure is given by \\[\\begin{equation}\n  \\left(\n  \\begin{array}{c}\n  \\eta_{0_{i, t}} \\\\\n  \\eta_{1_{i, t}} \\\\\n  \\end{array}\n  \\right)\n  =\n  \\left(\n  \\begin{array}{cc}\n    1 & 1 \\\\\n    0 & 1 \\\\\n  \\end{array}\n  \\right)\n  \\left(\n  \\begin{array}{c}\n  \\eta_{0_{i, t - 1}} \\\\\n  \\eta_{1_{i, t - 1}} \\\\\n  \\end{array}\n  \\right) .\n\\end{equation}\\]\nThe mean vector and covariance matrix of the intercept and slope are captured in the mean vector and covariance matrix of the initial condition given by \\[\\begin{equation}\n  \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\n  =\n  \\left(\n  \\begin{array}{c}\n    \\mu_{\\eta_{0}} \\\\\n    \\mu_{\\eta_{1}} \\\\\n  \\end{array}\n  \\right) \\quad \\mathrm{and,}\n\\end{equation}\\]\n\\[\\begin{equation}\n  \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n  =\n  \\left(\n  \\begin{array}{cc}\n    \\sigma^{2}_{\\eta_{0}} &\n    \\sigma_{\\eta_{0}, \\eta_{1}} \\\\\n    \\sigma_{\\eta_{1}, \\eta_{0}} &\n    \\sigma^{2}_{\\eta_{1}} \\\\\n  \\end{array}\n  \\right) .\n\\end{equation}\\]",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The Linear Growth Curve Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/lin-growth.html#data-generation",
    "href": ".setup/quarto/examples/lin-growth.html#data-generation",
    "title": "The Linear Growth Curve Model",
    "section": "Data Generation",
    "text": "Data Generation\nNotation\nLet \\(t = 5\\) be the number of time points and \\(n = 10^{4}\\) be the number of individuals.\nLet the measurement error variance \\(\\theta\\) be given by\n\\[\\begin{equation}\n\\theta\n=\n0.6 .\n\\end{equation}\\]\nLet the initial condition \\(\\boldsymbol{\\eta}_{0}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\eta}_{0}\n\\sim\n\\mathcal{N}\n\\left(\n\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0},\n\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n\\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{c}\n  0.615 \\\\\n  1.006 \\\\\n\\end{array}\n\\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{ccc}\n  1.932 & 0.618 \\\\\n  0.618 & 0.587 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nR Function Arguments\n\nn\n\n[1] 10000\n\ntime\n\n[1] 5\n\nmu0\n\n[1] 0.615 1.006\n\nsigma0\n\n      [,1]  [,2]\n[1,] 1.932 0.618\n[2,] 0.618 0.587\n\nsigma0_l # sigma0_l &lt;- t(chol(sigma0))\n\n          [,1]      [,2]\n[1,] 1.3899640 0.0000000\n[2,] 0.4446158 0.6239525\n\ntheta\n\n[1] 0.6\n\ntheta_l # theta_l &lt;- t(chol(theta))\n\n[1] 0.7745967\n\n\nVisualizing the Dynamics Without Measurement Error (n = 5 with Different Initial Condition)\n\n\n\n\n\n\n\n\nUsing the SimSSMLinGrowth Function from the simStateSpace Package to Simulate Data\n\nlibrary(simStateSpace)\nsim &lt;- SimSSMLinGrowth(\n  n = n,\n  time = time,\n  mu0 = mu0,\n  sigma0_l = sigma0_l,\n  theta_l = theta_l,\n  type = 0\n)\ndata &lt;- as.data.frame(sim)\nhead(data)\n\n  id time       y1\n1  1    0 1.723564\n2  1    1 2.148702\n3  1    2 3.384974\n4  1    3 6.225426\n5  1    4 5.993965\n6  2    0 1.951861\n\nsummary(data)\n\n       id             time         y1          \n Min.   :    1   Min.   :0   Min.   :-10.7863  \n 1st Qu.: 2501   1st Qu.:1   1st Qu.:  0.3943  \n Median : 5000   Median :2   Median :  2.1839  \n Mean   : 5000   Mean   :2   Mean   :  2.5978  \n 3rd Qu.: 7500   3rd Qu.:3   3rd Qu.:  4.4536  \n Max.   :10000   Max.   :4   Max.   : 21.0250  \n\nplot(sim)",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The Linear Growth Curve Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/lin-growth.html#model-fitting",
    "href": ".setup/quarto/examples/lin-growth.html#model-fitting",
    "title": "The Linear Growth Curve Model",
    "section": "Model Fitting",
    "text": "Model Fitting\nPrepare Data\n\ndynr_data &lt;- dynr::dynr.data(\n  dataframe = data,\n  id = \"id\",\n  time = \"time\",\n  observed = \"y1\"\n)\n\nPrepare Initial Condition\n\ndynr_initial &lt;- dynr::prep.initial(\n  values.inistate = mu0,\n  params.inistate = c(\"mu0_0\", \"mu0_1\"),\n  values.inicov = sigma0,\n  params.inicov = matrix(\n    data = c(\n      \"sigma0_00\", \"sigma0_01\",\n      \"sigma0_01\", \"sigma0_11\"\n    ),\n    nrow = 2\n  )\n)\n\nPrepare Measurement Model\n\ndynr_measurement &lt;- dynr::prep.measurement(\n  values.load = matrix(data = c(1, 0), nrow = 1),\n  params.load = matrix(data = \"fixed\", nrow = 1, ncol = 2),\n  state.names = c(\"eta_0\", \"eta_1\"),\n  obs.names = \"y1\"\n)\n\nPrepare Dynamic Process\n\ndynr_dynamics &lt;- dynr::prep.formulaDynamics(\n  formula = list(\n    eta_0 ~ eta_0 + eta_1,\n    eta_1 ~ eta_1\n  ),\n  isContinuousTime = FALSE\n)\n\nWarning in dynr::prep.formulaDynamics(formula = list(eta_0 ~ eta_0 + eta_1, :\nYou provided no start values: length(startval)==0. If you have no free\nparameters, keep calm and carry on.\n\n\nPrepare Process Noise\n\ndynr_noise &lt;- dynr::prep.noise(\n  values.latent = matrix(data = 0, nrow = 2, ncol = 2),\n  params.latent = matrix(data = \"fixed\", nrow = 2, ncol = 2),\n  values.observed = theta,\n  params.observed = \"theta\"\n)\n\nPrepare the Model\n\nmodel &lt;- dynr::dynr.model(\n  data = dynr_data,\n  initial = dynr_initial,\n  measurement = dynr_measurement,\n  dynamics = dynr_dynamics,\n  noise = dynr_noise,\n  outfile = \"lin-growth.c\"\n)\n\n\n\n\n\n\n\n\n\nFit the Model\n\nresults &lt;- dynr::dynr.cook(\n  model,\n  debug_flag = TRUE,\n  verbose = FALSE\n)\n\n[1] \"Get ready!!!!\"\nusing C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’\nOptimization function called.\nStarting Hessian calculation ...\nFinished Hessian calculation.\nOriginal exit flag:  3 \nModified exit flag:  3 \nOptimization terminated successfully: ftol_rel or ftol_abs was reached. \nOriginal fitted parameters:  -0.5089635 0.60732 0.9952181 0.6477021 0.3152438 \n-0.9463643 \n\nTransformed fitted parameters:  0.6011183 0.60732 0.9952181 1.911144 0.6024764 \n0.5780766 \n\nDoing end processing\nSuccessful trial\nTotal Time: 46.313 \nBackend Time: 45.78838",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The Linear Growth Curve Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/lin-growth.html#summary",
    "href": ".setup/quarto/examples/lin-growth.html#summary",
    "title": "The Linear Growth Curve Model",
    "section": "Summary",
    "text": "Summary\n\nsummary(results)\n\nCoefficients:\n          Estimate Std. Error t value ci.lower ci.upper Pr(&gt;|t|)    \ntheta     0.601118   0.004914  122.34 0.591488 0.610749   &lt;2e-16 ***\nmu0_0     0.607320   0.015112   40.19 0.577701 0.636939   &lt;2e-16 ***\nmu0_1     0.995218   0.007992  124.53 0.979554 1.010882   &lt;2e-16 ***\nsigma0_00 1.911144   0.032346   59.08 1.847747 1.974541   &lt;2e-16 ***\nsigma0_01 0.602476   0.013016   46.29 0.576966 0.627987   &lt;2e-16 ***\nsigma0_11 0.578077   0.009046   63.90 0.560347 0.595807   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log-likelihood value at convergence = 167712.56\nAIC = 167724.56\nBIC = 167777.48\n\n\n\n\n[1] 0.6073200 0.9952181\n\n\nEstimated Parameters\n\nmu0_hat\n\n[1] 0.6073200 0.9952181\n\nsigma0_hat\n\n          [,1]      [,2]\n[1,] 1.9111442 0.6024764\n[2,] 0.6024764 0.5780766\n\ntheta_hat\n\n    theta \n0.6011183",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The Linear Growth Curve Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/lin-growth.html#linear-growth-curve-model-in-structural-equation-modeling",
    "href": ".setup/quarto/examples/lin-growth.html#linear-growth-curve-model-in-structural-equation-modeling",
    "title": "The Linear Growth Curve Model",
    "section": "Linear Growth Curve Model in Structural Equation Modeling",
    "text": "Linear Growth Curve Model in Structural Equation Modeling\nWide Data Set\n\ndata &lt;- as.data.frame(sim, long = FALSE)\nhead(data)\n\n  id        y1_0       y1_1        y1_2        y1_3       y1_4\n1  1  1.72356430  2.1487019  3.38497364  6.22542609  5.9939649\n2  2  1.95186051  2.6140623  5.60107919  5.59791920  7.6881040\n3  3  0.07909854 -1.1410633 -0.02940765  0.07103948 -0.4998955\n4  4 -0.14827866 -0.6478676 -0.33440620 -0.29683127 -0.6950588\n5  5  1.14625267  2.3844799  0.39101270 -0.76159166  1.6750324\n6  6  1.02604168  2.1852479  2.55168739  2.13223414  4.1499727\n\n\nModel\n\nmodel &lt;- \"\n  # factor loadings\n  eta0 =~ 1 * y1_0 + 1 * y1_1 + 1 * y1_2 + 1 * y1_3 + 1 * y1_4\n  eta1 =~ 0 * y1_0 + 1 * y1_1 + 2 * y1_2 + 3 * y1_3 + 4 * y1_4\n  # means of latent variables\n  eta0 ~ mu0_0 * 1\n  eta1 ~ mu0_1 * 1\n  # variances and covariances of latent variables\n  eta0 ~~ sigma0_00 * eta0\n  eta0 ~~ sigma0_01 * eta1\n  eta1 ~~ sigma0_11 * eta1\n  # constrain error variance theta to be equal\n  y1_0 ~~ theta * y1_0\n  y1_1 ~~ theta * y1_1\n  y1_2 ~~ theta * y1_2\n  y1_3 ~~ theta * y1_3\n  y1_4 ~~ theta * y1_4\n\"\n\n\nfit &lt;- lavaan::growth(\n  model = model,\n  data = data\n)\nlavaan::summary(fit)\n\nlavaan 0.6-19 ended normally after 34 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        10\n  Number of equality constraints                     4\n\n  Number of observations                         10000\n\nModel Test User Model:\n                                                      \n  Test statistic                                 5.386\n  Degrees of freedom                                14\n  P-value (Chi-square)                           0.980\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  eta0 =~                                             \n    y1_0              1.000                           \n    y1_1              1.000                           \n    y1_2              1.000                           \n    y1_3              1.000                           \n    y1_4              1.000                           \n  eta1 =~                                             \n    y1_0              0.000                           \n    y1_1              1.000                           \n    y1_2              2.000                           \n    y1_3              3.000                           \n    y1_4              4.000                           \n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  eta0 ~~                                             \n    eta1    (s0_0)    0.602    0.013   46.317    0.000\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    eta0    (m0_0)    0.607    0.015   40.295    0.000\n    eta1    (m0_1)    0.995    0.008  124.582    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    eta0    (s0_0)    1.911    0.032   59.235    0.000\n    eta1    (s0_1)    0.578    0.009   63.955    0.000\n   .y1_0    (thet)    0.601    0.005  122.474    0.000\n   .y1_1    (thet)    0.601    0.005  122.474    0.000\n   .y1_2    (thet)    0.601    0.005  122.474    0.000\n   .y1_3    (thet)    0.601    0.005  122.474    0.000\n   .y1_4    (thet)    0.601    0.005  122.474    0.000\n\n\n\n\n[1] 0.6073200 0.9952181\n\n\nEstimated Parameters\n\nmu0_hat\n\n[1] 0.6073200 0.9952181\n\nsigma0_hat\n\n          [,1]      [,2]\n[1,] 1.9111442 0.6024764\n[2,] 0.6024764 0.5780766\n\ntheta_hat\n\n[1] 0.6011183",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>The Linear Growth Curve Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/var.html",
    "href": ".setup/quarto/examples/var.html",
    "title": "The Vector Autoregressive Model",
    "section": "",
    "text": "Model\nThe measurement model is given by \\[\\begin{equation}\n  \\mathbf{y}_{i, t}\n  =\n  \\boldsymbol{\\eta}_{i, t}\n\\end{equation}\\] where \\(\\mathbf{y}_{i, t}\\) represents a vector of observed variables and \\(\\boldsymbol{\\eta}_{i, t}\\) a vector of latent variables for individual \\(i\\) and time \\(t\\). Since the observed and latent variables are equal, we only generate data from the dynamic structure.\nThe dynamic structure is given by \\[\\begin{equation}\n  \\boldsymbol{\\eta}_{i, t}\n  =\n  \\boldsymbol{\\alpha}\n  +\n  \\boldsymbol{\\beta}\n  \\boldsymbol{\\eta}_{i, t - 1}\n  +\n  \\boldsymbol{\\zeta}_{i, t},\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\boldsymbol{\\zeta}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  \\mathbf{0},\n  \\boldsymbol{\\Psi}\n  \\right)\n\\end{equation}\\] where \\(\\boldsymbol{\\eta}_{i, t}\\), \\(\\boldsymbol{\\eta}_{i, t - 1}\\), and \\(\\boldsymbol{\\zeta}_{i, t}\\) are random variables, and \\(\\boldsymbol{\\alpha}\\), \\(\\boldsymbol{\\beta}\\), and \\(\\boldsymbol{\\Psi}\\) are model parameters. Here, \\(\\boldsymbol{\\eta}_{i, t}\\) is a vector of latent variables at time \\(t\\) and individual \\(i\\), \\(\\boldsymbol{\\eta}_{i, t - 1}\\) represents a vector of latent variables at time \\(t - 1\\) and individual \\(i\\), and \\(\\boldsymbol{\\zeta}_{i, t}\\) represents a vector of dynamic noise at time \\(t\\) and individual \\(i\\). \\(\\boldsymbol{\\alpha}\\) denotes a vector of intercepts, \\(\\boldsymbol{\\beta}\\) a matrix of autoregression and cross regression coefficients, and \\(\\boldsymbol{\\Psi}\\) the covariance matrix of \\(\\boldsymbol{\\zeta}_{i, t}\\).\nAn alternative representation of the dynamic noise is given by \\[\\begin{equation}\n  \\boldsymbol{\\zeta}_{i, t}\n  =\n  \\boldsymbol{\\Psi}^{\\frac{1}{2}}\n  \\mathbf{z}_{i, t},\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\mathbf{z}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  \\mathbf{0},\n  \\mathbf{I}\n  \\right)\n\\end{equation}\\] where \\(\\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right) \\left( \\boldsymbol{\\Psi}^{\\frac{1}{2}} \\right)^{\\prime} = \\boldsymbol{\\Psi}\\) .",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>The Vector Autoregressive Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/var.html#data-generation",
    "href": ".setup/quarto/examples/var.html#data-generation",
    "title": "The Vector Autoregressive Model",
    "section": "Data Generation",
    "text": "Data Generation\nNotation\nLet \\(t = 1000\\) be the number of time points and \\(n = 5\\) be the number of individuals.\nLet the initial condition \\(\\boldsymbol{\\eta}_{0}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0.2 & 0.2 \\\\\n  0.2 & 1 & 0.2 \\\\\n  0.2 & 0.2 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the constant vector \\(\\boldsymbol{\\alpha}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\alpha}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the transition matrix \\(\\boldsymbol{\\beta}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\beta}\n=\n\\left(\n\\begin{array}{ccc}\n  0.7 & 0 & 0 \\\\\n  0.5 & 0.6 & 0 \\\\\n  -0.1 & 0.4 & 0.5 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the dynamic process noise \\(\\boldsymbol{\\Psi}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Psi}\n=\n\\left(\n\\begin{array}{ccc}\n  0.1 & 0 & 0 \\\\\n  0 & 0.1 & 0 \\\\\n  0 & 0 & 0.1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nR Function Arguments\n\nn\n\n[1] 5\n\ntime\n\n[1] 1000\n\nmu0\n\n[1] 0 0 0\n\nsigma0\n\n     [,1] [,2] [,3]\n[1,]  1.0  0.2  0.2\n[2,]  0.2  1.0  0.2\n[3,]  0.2  0.2  1.0\n\nsigma0_l # sigma0_l &lt;- t(chol(sigma0))\n\n     [,1]      [,2]      [,3]\n[1,]  1.0 0.0000000 0.0000000\n[2,]  0.2 0.9797959 0.0000000\n[3,]  0.2 0.1632993 0.9660918\n\nalpha\n\n[1] 0 0 0\n\nbeta\n\n     [,1] [,2] [,3]\n[1,]  0.7  0.0  0.0\n[2,]  0.5  0.6  0.0\n[3,] -0.1  0.4  0.5\n\npsi\n\n     [,1] [,2] [,3]\n[1,]  0.1  0.0  0.0\n[2,]  0.0  0.1  0.0\n[3,]  0.0  0.0  0.1\n\npsi_l # psi_l &lt;- t(chol(psi))\n\n          [,1]      [,2]      [,3]\n[1,] 0.3162278 0.0000000 0.0000000\n[2,] 0.0000000 0.3162278 0.0000000\n[3,] 0.0000000 0.0000000 0.3162278\n\n\nVisualizing the Dynamics Without Process Noise (n = 5 with Different Initial Condition)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the SimSSMVARFixed Function from the simStateSpace Package to Simulate Data\n\nlibrary(simStateSpace)\nsim &lt;- SimSSMVARFixed(\n  n = n,\n  time = time,\n  mu0 = mu0,\n  sigma0_l = sigma0_l,\n  alpha = alpha,\n  beta = beta,\n  psi_l = psi_l\n)\ndata &lt;- as.data.frame(sim)\nhead(data)\n\n  id time          y1         y2         y3\n1  1    0 -1.84569501  0.5815402  0.8057225\n2  1    1 -1.34252674 -1.1219724  0.9873906\n3  1    2 -0.57123433 -1.1591679  0.1280274\n4  1    3 -0.44448720 -0.9783200 -0.3028425\n5  1    4 -0.28796224 -1.2222325 -0.3807219\n6  1    5  0.01622801 -1.2362032 -1.0056038\n\nsummary(data)\n\n       id         time             y1                 y2          \n Min.   :1   Min.   :  0.0   Min.   :-1.84570   Min.   :-2.17817  \n 1st Qu.:2   1st Qu.:249.8   1st Qu.:-0.31071   1st Qu.:-0.42138  \n Median :3   Median :499.5   Median :-0.01764   Median :-0.01740  \n Mean   :3   Mean   :499.5   Mean   :-0.01425   Mean   :-0.02021  \n 3rd Qu.:4   3rd Qu.:749.2   3rd Qu.: 0.27870   3rd Qu.: 0.37021  \n Max.   :5   Max.   :999.0   Max.   : 1.56537   Max.   : 2.83572  \n       y3           \n Min.   :-1.774215  \n 1st Qu.:-0.363420  \n Median :-0.005834  \n Mean   :-0.009098  \n 3rd Qu.: 0.341318  \n Max.   : 1.817859  \n\nplot(sim)",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>The Vector Autoregressive Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/var.html#model-fitting",
    "href": ".setup/quarto/examples/var.html#model-fitting",
    "title": "The Vector Autoregressive Model",
    "section": "Model Fitting",
    "text": "Model Fitting\nPrepare Data\n\ndynr_data &lt;- dynr::dynr.data(\n  data = data,\n  id = \"id\",\n  time = \"time\",\n  observed = c(\"y1\", \"y2\", \"y3\")\n)\n\nPrepare Initial Condition\n\ndynr_initial &lt;- dynr::prep.initial(\n  values.inistate = mu0,\n  params.inistate = c(\"mu0_1_1\", \"mu0_2_1\", \"mu0_3_1\"),\n  values.inicov = sigma0,\n  params.inicov = matrix(\n    data = c(\n      \"sigma0_1_1\", \"sigma0_2_1\", \"sigma0_3_1\",\n      \"sigma0_2_1\", \"sigma0_2_2\", \"sigma0_3_2\",\n      \"sigma0_3_1\", \"sigma0_3_2\", \"sigma0_3_3\"\n    ),\n    nrow = 3\n  )\n)\n\nPrepare Measurement Model\n\ndynr_measurement &lt;- dynr::prep.measurement(\n  values.load = diag(3),\n  params.load = matrix(data = \"fixed\", nrow = 3, ncol = 3),\n  state.names = c(\"eta_1\", \"eta_2\", \"eta_3\"),\n  obs.names = c(\"y1\", \"y2\", \"y3\")\n)\n\nPrepare Dynamic Process\n\ndynr_dynamics &lt;- dynr::prep.formulaDynamics(\n  formula = list(\n    eta_1 ~ alpha_1_1 * 1 + beta_1_1 * eta_1 + beta_1_2 * eta_2 + beta_1_3 * eta_3,\n    eta_2 ~ alpha_2_1 * 1 + beta_2_1 * eta_1 + beta_2_2 * eta_2 + beta_2_3 * eta_3,\n    eta_3 ~ alpha_3_1 * 1 + beta_3_1 * eta_1 + beta_3_2 * eta_2 + beta_3_3 * eta_3\n  ),\n  startval = c(\n    alpha_1_1 = alpha[1], alpha_2_1 = alpha[2], alpha_3_1 = alpha[3],\n    beta_1_1 = beta[1, 1], beta_1_2 = beta[1, 2], beta_1_3 = beta[1, 3],\n    beta_2_1 = beta[2, 1], beta_2_2 = beta[2, 2], beta_2_3 = beta[2, 3],\n    beta_3_1 = beta[3, 1], beta_3_2 = beta[3, 2], beta_3_3 = beta[3, 3]\n  ),\n  isContinuousTime = FALSE\n)\n\nPrepare Process Noise\n\ndynr_noise &lt;- dynr::prep.noise(\n  values.latent = psi,\n  params.latent = matrix(\n    data = c(\n      \"psi_1_1\", \"psi_2_1\", \"psi_3_1\",\n      \"psi_2_1\", \"psi_2_2\", \"psi_3_2\",\n      \"psi_3_1\", \"psi_3_2\", \"psi_3_3\"\n    ),\n    nrow = 3\n  ),\n  values.observed = matrix(data = 0, nrow = 3, ncol = 3),\n  params.observed = matrix(data = \"fixed\", nrow = 3, ncol = 3)\n)\n\nPrepare the Model\n\nmodel &lt;- dynr::dynr.model(\n  data = dynr_data,\n  initial = dynr_initial,\n  measurement = dynr_measurement,\n  dynamics = dynr_dynamics,\n  noise = dynr_noise,\n  outfile = \"var.c\"\n)\n\n\n\n\n\n\n\n\n\nFit the Model\n\nresults &lt;- dynr::dynr.cook(\n  model,\n  debug_flag = TRUE,\n  verbose = FALSE\n)\n\n[1] \"Get ready!!!!\"\nusing C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’\nOptimization function called.\nStarting Hessian calculation ...\nFinished Hessian calculation.\nOriginal exit flag:  3 \nModified exit flag:  3 \nOptimization terminated successfully: ftol_rel or ftol_abs was reached. \nOriginal fitted parameters:  -0.003531293 -0.001280376 0.001523566 0.6895684 \n0.01390681 -0.003940273 0.4892806 0.6166874 -0.00850994 -0.1131785 0.4157686 \n0.4948645 -2.314722 -0.02295081 -0.01630225 -2.301541 -0.01437825 -2.302993 \n-0.7217189 0.5433516 0.8634073 -0.2858639 -1.244706 0.1022364 0.00547225 \n0.08818863 -1.187881 \n\nTransformed fitted parameters:  -0.003531293 -0.001280376 0.001523566 0.6895684 \n0.01390681 -0.003940273 0.4892806 0.6166874 -0.00850994 -0.1131785 0.4157686 \n0.4948645 0.09879361 -0.002267393 -0.001610558 0.1001565 -0.001402363 0.1000062 \n-0.7217189 0.5433516 0.8634073 0.7513649 -0.9352283 0.07681685 2.169571 \n-0.006941846 0.3205399 \n\nDoing end processing\nSuccessful trial\nTotal Time: 2.207808 \nBackend Time: 2.200906",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>The Vector Autoregressive Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/var.html#summary",
    "href": ".setup/quarto/examples/var.html#summary",
    "title": "The Vector Autoregressive Model",
    "section": "Summary",
    "text": "Summary\n\nsummary(results)\n\nCoefficients:\n             Estimate Std. Error t value   ci.lower   ci.upper Pr(&gt;|t|)    \nalpha_1_1  -0.0035313  0.0044508  -0.793 -0.0122548  0.0051922   0.2138    \nalpha_2_1  -0.0012804  0.0044814  -0.286 -0.0100638  0.0075031   0.3876    \nalpha_3_1   0.0015236  0.0044781   0.340 -0.0072533  0.0103004   0.3668    \nbeta_1_1    0.6895684  0.0112672  61.202  0.6674852  0.7116517   &lt;2e-16 ***\nbeta_1_2    0.0139068  0.0093820   1.482 -0.0044815  0.0322952   0.0692 .  \nbeta_1_3   -0.0039403  0.0095679  -0.412 -0.0226930  0.0148125   0.3402    \nbeta_2_1    0.4892806  0.0113446  43.129  0.4670456  0.5115157   &lt;2e-16 ***\nbeta_2_2    0.6166874  0.0094464  65.283  0.5981727  0.6352020   &lt;2e-16 ***\nbeta_2_3   -0.0085099  0.0096336  -0.883 -0.0273915  0.0103716   0.1885    \nbeta_3_1   -0.1131785  0.0113361  -9.984 -0.1353969 -0.0909601   &lt;2e-16 ***\nbeta_3_2    0.4157686  0.0094393  44.047  0.3972680  0.4342693   &lt;2e-16 ***\nbeta_3_3    0.4948645  0.0096263  51.408  0.4759973  0.5137317   &lt;2e-16 ***\npsi_1_1     0.0987936  0.0019768  49.976  0.0949191  0.1026681   &lt;2e-16 ***\npsi_2_1    -0.0022674  0.0014078  -1.611 -0.0050266  0.0004919   0.0537 .  \npsi_3_1    -0.0016106  0.0014066  -1.145 -0.0043674  0.0011463   0.1261    \npsi_2_2     0.1001565  0.0020041  49.975  0.0962285  0.1040845   &lt;2e-16 ***\npsi_3_2    -0.0014024  0.0014162  -0.990 -0.0041780  0.0013733   0.1611    \npsi_3_3     0.1000062  0.0020011  49.976  0.0960841  0.1039282   &lt;2e-16 ***\nmu0_1_1    -0.7217189  0.3854554  -1.872 -1.4771977  0.0337599   0.0306 *  \nmu0_2_1     0.5433516  0.6542311   0.831 -0.7389178  1.8256210   0.2031    \nmu0_3_1     0.8634073  0.2531618   3.410  0.3672192  1.3595954   0.0003 ***\nsigma0_1_1  0.7513649  0.4740246   1.585 -0.1777063  1.6804360   0.0565 .  \nsigma0_2_1 -0.9352283  0.7049527  -1.327 -2.3169103  0.4464537   0.0923 .  \nsigma0_3_1  0.0768168  0.2221450   0.346 -0.3585794  0.5122131   0.3648    \nsigma0_2_2  2.1695715  1.3671181   1.587 -0.5099307  4.8490737   0.0563 .  \nsigma0_3_2 -0.0069418  0.3726743  -0.019 -0.7373700  0.7234863   0.4926    \nsigma0_3_3  0.3205399  0.2023250   1.584 -0.0760099  0.7170897   0.0566 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log-likelihood value at convergence = 8000.08\nAIC = 8054.08\nBIC = 8230.05\n\n\nParameter Estimates\n\nalpha_hat\n\n[1] -0.003531293 -0.001280376  0.001523566\n\nbeta_hat\n\n           [,1]       [,2]         [,3]\n[1,]  0.6895684 0.01390681 -0.003940273\n[2,]  0.4892806 0.61668735 -0.008509940\n[3,] -0.1131785 0.41576863  0.494864534\n\npsi_hat\n\n             [,1]         [,2]         [,3]\n[1,]  0.098793608 -0.002267393 -0.001610558\n[2,] -0.002267393  0.100156481 -0.001402363\n[3,] -0.001610558 -0.001402363  0.100006157\n\nmu0_hat\n\n[1] -0.7217189  0.5433516  0.8634073\n\nsigma0_hat\n\n            [,1]         [,2]         [,3]\n[1,]  0.75136488 -0.935228319  0.076816849\n[2,] -0.93522832  2.169571479 -0.006941846\n[3,]  0.07681685 -0.006941846  0.320539871",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>The Vector Autoregressive Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/ou.html",
    "href": ".setup/quarto/examples/ou.html",
    "title": "The Ornstein–Uhlenbeck Model",
    "section": "",
    "text": "Model\nThe measurement model is given by \\[\\begin{equation}\n  \\mathbf{y}_{i, t}\n  =\n  \\boldsymbol{\\nu}\n  +\n  \\boldsymbol{\\Lambda}\n  \\boldsymbol{\\eta}_{i, t}\n  +\n  \\boldsymbol{\\varepsilon}_{i, t},\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\boldsymbol{\\varepsilon}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  \\mathbf{0},\n  \\boldsymbol{\\Theta}\n  \\right)\n\\end{equation}\\] where \\(\\mathbf{y}_{i, t}\\), \\(\\boldsymbol{\\eta}_{i, t}\\), and \\(\\boldsymbol{\\varepsilon}_{i, t}\\) are random variables and \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), and \\(\\boldsymbol{\\Theta}\\) are model parameters. \\(\\mathbf{y}_{i, t}\\) represents a vector of observed random variables, \\(\\boldsymbol{\\eta}_{i, t}\\) a vector of latent random variables, and \\(\\boldsymbol{\\varepsilon}_{i, t}\\) a vector of random measurement errors, at time \\(t\\) and individual \\(i\\). \\(\\boldsymbol{\\nu}\\) denotes a vector of intercepts, \\(\\boldsymbol{\\Lambda}\\) a matrix of factor loadings, and \\(\\boldsymbol{\\Theta}\\) the covariance matrix of \\(\\boldsymbol{\\varepsilon}\\).\nAn alternative representation of the measurement error is given by \\[\\begin{equation}\n  \\boldsymbol{\\varepsilon}_{i, t}\n  =\n  \\boldsymbol{\\Theta}^{\\frac{1}{2}}\n  \\mathbf{z}_{i, t},\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\mathbf{z}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  \\mathbf{0},\n  \\mathbf{I}\n  \\right)\n\\end{equation}\\] where \\(\\mathbf{z}_{i, t}\\) is a vector of independent standard normal random variables and \\(\\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right) \\left( \\boldsymbol{\\Theta}^{\\frac{1}{2}} \\right)^{\\prime} = \\boldsymbol{\\Theta}\\) .\nThe dynamic structure is given by \\[\\begin{equation}\n  \\mathrm{d} \\boldsymbol{\\eta}_{i, t}\n  =\n  \\boldsymbol{\\Phi}\n  \\left(\n  \\boldsymbol{\\eta}_{i, t}\n  -\n  \\boldsymbol{\\mu}\n  \\right)\n  \\mathrm{d}t\n  +\n  \\boldsymbol{\\Sigma}^{\\frac{1}{2}}\n  \\mathrm{d}\n  \\mathbf{W}_{i, t}\n\\end{equation}\\] where \\(\\boldsymbol{\\mu}\\) is the long-term mean or equilibrium level, \\(\\boldsymbol{\\Phi}\\) is the rate of mean reversion, determining how quickly the variable returns to its mean, \\(\\boldsymbol{\\Sigma}\\) is the matrix of volatility or randomness in the process, and \\(\\mathrm{d}\\boldsymbol{W}\\) is a Wiener process or Brownian motion, which represents random fluctuations.",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>The Ornstein–Uhlenbeck Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#data-generation",
    "href": ".setup/quarto/examples/ou.html#data-generation",
    "title": "The Ornstein–Uhlenbeck Model",
    "section": "Data Generation",
    "text": "Data Generation\nNotation\nLet \\(t = 1000\\) be the number of time points and \\(n = 5\\) be the number of individuals.\nLet the measurement model intecept vector \\(\\boldsymbol{\\nu}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\nu}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the factor loadings matrix \\(\\boldsymbol{\\Lambda}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Lambda}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0 & 0 \\\\\n  0 & 1 & 0 \\\\\n  0 & 0 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the measurement error covariance matrix \\(\\boldsymbol{\\Theta}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Theta}\n=\n\\left(\n\\begin{array}{ccc}\n  0.2 & 0 & 0 \\\\\n  0 & 0.2 & 0 \\\\\n  0 & 0 & 0.2 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the initial condition \\(\\boldsymbol{\\eta}_{0}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0.2 & 0.2 \\\\\n  0.2 & 1 & 0.2 \\\\\n  0.2 & 0.2 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the long-term mean vector \\(\\boldsymbol{\\mu}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\mu}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the rate of mean reversion matrix \\(\\boldsymbol{\\Phi}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Phi}\n=\n\\left(\n\\begin{array}{ccc}\n  -0.357 & 0 & 0 \\\\\n  0.771 & -0.511 & 0 \\\\\n  -0.45 & 0.729 & -0.693 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the dynamic process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}\n=\n\\left(\n\\begin{array}{ccc}\n  0.2445556 & 0.0220159 & -0.0500476 \\\\\n  0.0220159 & 0.070678 & 0.0153946 \\\\\n  -0.0500476 & 0.0153946 & 0.0755306 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet \\(\\Delta t = 0.1\\).\nR Function Arguments\n\nn\n\n[1] 5\n\ntime\n\n[1] 1000\n\ndelta_t\n\n[1] 0.1\n\nmu0\n\n[1] 0 0 0\n\nsigma0\n\n     [,1] [,2] [,3]\n[1,]  1.0  0.2  0.2\n[2,]  0.2  1.0  0.2\n[3,]  0.2  0.2  1.0\n\nsigma0_l # sigma0_l &lt;- t(chol(sigma0))\n\n     [,1]      [,2]      [,3]\n[1,]  1.0 0.0000000 0.0000000\n[2,]  0.2 0.9797959 0.0000000\n[3,]  0.2 0.1632993 0.9660918\n\nmu\n\n[1] 0 0 0\n\nphi\n\n       [,1]   [,2]   [,3]\n[1,] -0.357  0.000  0.000\n[2,]  0.771 -0.511  0.000\n[3,] -0.450  0.729 -0.693\n\nsigma\n\n            [,1]       [,2]        [,3]\n[1,]  0.24455556 0.02201587 -0.05004762\n[2,]  0.02201587 0.07067800  0.01539456\n[3,] -0.05004762 0.01539456  0.07553061\n\nsigma_l # sigma_l &lt;- t(chol(sigma))\n\n            [,1]      [,2]     [,3]\n[1,]  0.49452559 0.0000000 0.000000\n[2,]  0.04451917 0.2620993 0.000000\n[3,] -0.10120330 0.0759256 0.243975\n\nnu\n\n[1] 0 0 0\n\nlambda\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\ntheta\n\n     [,1] [,2] [,3]\n[1,]  0.2  0.0  0.0\n[2,]  0.0  0.2  0.0\n[3,]  0.0  0.0  0.2\n\ntheta_l # theta_l &lt;- t(chol(theta))\n\n          [,1]      [,2]      [,3]\n[1,] 0.4472136 0.0000000 0.0000000\n[2,] 0.0000000 0.4472136 0.0000000\n[3,] 0.0000000 0.0000000 0.4472136\n\n\nVisualizing the Dynamics Without Measurement Error and Process Noise (n = 5 with Different Initial Condition)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the SimSSMOUFixed Function from the simStateSpace Package to Simulate Data\n\nlibrary(simStateSpace)\nsim &lt;- SimSSMOUFixed(\n  n = n,\n  time = time,\n  delta_t = delta_t,\n  mu0 = mu0,\n  sigma0_l = sigma0_l,\n  mu = mu,\n  phi = phi,\n  sigma_l = sigma_l,\n  nu = nu,\n  lambda = lambda,\n  theta_l = theta_l,\n  type = 0\n)\ndata &lt;- as.data.frame(sim)\nhead(data)\n\n  id time          y1          y2        y3\n1  1  0.0  0.29937539 -1.37581548 1.3779071\n2  1  0.1 -0.98770381 -0.03632195 0.8363080\n3  1  0.2  0.33221051 -0.40321664 1.2054318\n4  1  0.3 -0.09485392 -0.82030556 1.0272653\n5  1  0.4 -1.50322069 -0.36841853 0.1821731\n6  1  0.5 -0.75049839  0.35752476 0.2862544\n\nsummary(data)\n\n       id         time             y1                 y2          \n Min.   :1   Min.   : 0.00   Min.   :-2.25375   Min.   :-2.75152  \n 1st Qu.:2   1st Qu.:24.98   1st Qu.:-0.41569   1st Qu.:-0.47639  \n Median :3   Median :49.95   Median : 0.04509   Median : 0.08626  \n Mean   :3   Mean   :49.95   Mean   : 0.03947   Mean   : 0.05358  \n 3rd Qu.:4   3rd Qu.:74.92   3rd Qu.: 0.50782   3rd Qu.: 0.61048  \n Max.   :5   Max.   :99.90   Max.   : 2.74461   Max.   : 3.02675  \n       y3          \n Min.   :-2.34092  \n 1st Qu.:-0.44476  \n Median : 0.02716  \n Mean   : 0.01476  \n 3rd Qu.: 0.48321  \n Max.   : 2.34972  \n\nplot(sim)",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>The Ornstein–Uhlenbeck Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#model-fitting",
    "href": ".setup/quarto/examples/ou.html#model-fitting",
    "title": "The Ornstein–Uhlenbeck Model",
    "section": "Model Fitting",
    "text": "Model Fitting\nPrepare Data\n\ndynr_data &lt;- dynr::dynr.data(\n  dataframe = data,\n  id = \"id\",\n  time = \"time\",\n  observed = c(\"y1\", \"y2\", \"y3\")\n)\n\nPrepare Initial Condition\n\ndynr_initial &lt;- dynr::prep.initial(\n  values.inistate = mu0,\n  params.inistate = c(\"mu0_1_1\", \"mu0_2_1\", \"mu0_3_1\"),\n  values.inicov = sigma0,\n  params.inicov = matrix(\n    data = c(\n      \"sigma0_1_1\", \"sigma0_2_1\", \"sigma0_3_1\",\n      \"sigma0_2_1\", \"sigma0_2_2\", \"sigma0_3_2\",\n      \"sigma0_3_1\", \"sigma0_3_2\", \"sigma0_3_3\"\n    ),\n    nrow = 3\n  )\n)\n\nPrepare Measurement Model\n\ndynr_measurement &lt;- dynr::prep.measurement(\n  values.load = diag(3),\n  params.load = matrix(data = \"fixed\", nrow = 3, ncol = 3),\n  state.names = c(\"eta_1\", \"eta_2\", \"eta_3\"),\n  obs.names = c(\"y1\", \"y2\", \"y3\")\n)\n\nPrepare Dynamic Process\n\ndynr_dynamics &lt;- dynr::prep.formulaDynamics(\n  formula = list(\n    eta_1 ~ (phi_1_1 * (eta_1 - mu_1_1)) + (phi_1_2 * (eta_2 - mu_2_1)) + (phi_1_3 * (eta_3 - mu_3_1)),\n    eta_2 ~ (phi_2_1 * (eta_1 - mu_1_1)) + (phi_2_2 * (eta_2 - mu_2_1)) + (phi_2_3 * (eta_3 - mu_3_1)),\n    eta_3 ~ (phi_3_1 * (eta_1 - mu_1_1)) + (phi_3_2 * (eta_2 - mu_2_1)) + (phi_3_3 * (eta_3 - mu_3_1))\n  ),\n  startval = c(\n    mu_1_1 = mu[1], mu_2_1 = mu[2], mu_3_1 = mu[3],\n    phi_1_1 = phi[1, 1], phi_1_2 = phi[1, 2], phi_1_3 = phi[1, 3],\n    phi_2_1 = phi[2, 1], phi_2_2 = phi[2, 2], phi_2_3 = phi[2, 3],\n    phi_3_1 = phi[3, 1], phi_3_2 = phi[3, 2], phi_3_3 = phi[3, 3]\n  ),\n  isContinuousTime = TRUE\n)\n\nPrepare Process Noise\n\ndynr_noise &lt;- dynr::prep.noise(\n  values.latent = sigma,\n  params.latent = matrix(\n    data = c(\n      \"sigma_1_1\", \"sigma_2_1\", \"sigma_3_1\",\n      \"sigma_2_1\", \"sigma_2_2\", \"sigma_3_2\",\n      \"sigma_3_1\", \"sigma_3_2\", \"sigma_3_3\"\n    ),\n    nrow = 3\n  ),\n  values.observed = theta,\n  params.observed = matrix(\n    data = c(\n      \"theta_1_1\", \"fixed\", \"fixed\",\n      \"fixed\", \"theta_2_2\", \"fixed\",\n      \"fixed\", \"fixed\", \"theta_3_3\"\n    ),\n    nrow = 3\n  )\n)\n\nPrepare the Model\n\nmodel &lt;- dynr::dynr.model(\n  data = dynr_data,\n  initial = dynr_initial,\n  measurement = dynr_measurement,\n  dynamics = dynr_dynamics,\n  noise = dynr_noise,\n  outfile = \"ou.c\"\n)\n\nAdd lower and upper bounds to aid in the optimization.\n\nmodel$lb[\n  c(\n    \"phi_1_1\",\n    \"phi_1_2\",\n    \"phi_1_3\",\n    \"phi_2_1\",\n    \"phi_2_2\",\n    \"phi_2_3\",\n    \"phi_3_1\",\n    \"phi_3_2\",\n    \"phi_3_3\"\n  )\n] &lt;- -1.5\nmodel$ub[\n  c(\n    \"phi_1_1\",\n    \"phi_1_2\",\n    \"phi_1_3\",\n    \"phi_2_1\",\n    \"phi_2_2\",\n    \"phi_2_3\",\n    \"phi_3_1\",\n    \"phi_3_2\",\n    \"phi_3_3\"\n  )\n] &lt;- +1.5\n\n\n\n\n\n\n\n\n\nFit the Model\n\nresults &lt;- dynr::dynr.cook(\n  model,\n  debug_flag = TRUE,\n  verbose = FALSE\n)\n\n[1] \"Get ready!!!!\"\nusing C compiler: ‘gcc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0’\nOptimization function called.\nStarting Hessian calculation ...\nFinished Hessian calculation.\nOriginal exit flag:  3 \nModified exit flag:  3 \nOptimization terminated successfully: ftol_rel or ftol_abs was reached. \nOriginal fitted parameters:  0.05480875 0.0970006 0.04993973 -0.434506 \n0.02467277 -0.05454905 0.8417982 -0.6017518 0.1099265 -0.3702948 0.6609449 \n-0.6606183 -1.381888 0.08161089 -0.2479494 -2.480951 0.1751864 -2.810068 \n-1.625097 -1.682562 -1.597112 -0.3660337 -0.4092527 0.2149727 -0.7538976 \n0.6368556 0.4928618 -0.5914103 0.6108847 -2.103637 \n\nTransformed fitted parameters:  0.05480875 0.0970006 0.04993973 -0.434506 \n0.02467277 -0.05454905 0.8417982 -0.6017518 0.1099265 -0.3702948 0.6609449 \n-0.6606183 0.2511041 0.02049283 -0.0622611 0.08533609 0.009575553 0.07820615 \n0.1968925 0.1858971 0.2024804 -0.3660337 -0.4092527 0.2149727 0.470529 \n0.2996591 0.2319058 0.7443856 0.4858433 0.4428818 \n\nDoing end processing\nSuccessful trial\nTotal Time: 4.105517 \nBackend Time: 4.097889",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>The Ornstein–Uhlenbeck Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#summary",
    "href": ".setup/quarto/examples/ou.html#summary",
    "title": "The Ornstein–Uhlenbeck Model",
    "section": "Summary",
    "text": "Summary\n\nsummary(results)\n\nCoefficients:\n            Estimate Std. Error t value  ci.lower  ci.upper Pr(&gt;|t|)    \nmu_1_1      0.054809   0.051341   1.068 -0.045818  0.155436   0.1429    \nmu_2_1      0.097001   0.086113   1.126 -0.071777  0.265778   0.1300    \nmu_3_1      0.049940   0.057135   0.874 -0.062042  0.161922   0.1911    \nphi_1_1    -0.434506   0.180354  -2.409 -0.787994 -0.081018   0.0080 ** \nphi_1_2     0.024673   0.154258   0.160 -0.277668  0.327013   0.4365    \nphi_1_3    -0.054549   0.126095  -0.433 -0.301690  0.192592   0.3327    \nphi_2_1     0.841798   0.116934   7.199  0.612611  1.070985   &lt;2e-16 ***\nphi_2_2    -0.601752   0.102169  -5.890 -0.802000 -0.401504   &lt;2e-16 ***\nphi_2_3     0.109926   0.083850   1.311 -0.054416  0.274269   0.0950 .  \nphi_3_1    -0.370295   0.114555  -3.232 -0.594819 -0.145771   0.0006 ***\nphi_3_2     0.660945   0.099134   6.667  0.466647  0.855243   &lt;2e-16 ***\nphi_3_3    -0.660618   0.081176  -8.138 -0.819720 -0.501517   &lt;2e-16 ***\nsigma_1_1   0.251104   0.031869   7.879  0.188642  0.313566   &lt;2e-16 ***\nsigma_2_1   0.020493   0.012759   1.606 -0.004513  0.045499   0.0541 .  \nsigma_3_1  -0.062261   0.012982  -4.796 -0.087706 -0.036816   &lt;2e-16 ***\nsigma_2_2   0.085336   0.010363   8.234  0.065024  0.105648   &lt;2e-16 ***\nsigma_3_2   0.009576   0.006803   1.408 -0.003758  0.022909   0.0797 .  \nsigma_3_3   0.078206   0.009743   8.027  0.059110  0.097303   &lt;2e-16 ***\ntheta_1_1   0.196892   0.005250  37.504  0.186603  0.207182   &lt;2e-16 ***\ntheta_2_2   0.185897   0.004255  43.687  0.177557  0.194237   &lt;2e-16 ***\ntheta_3_3   0.202480   0.004592  44.090  0.193479  0.211481   &lt;2e-16 ***\nmu0_1_1    -0.366034   0.327590  -1.117 -1.008099  0.276031   0.1319    \nmu0_2_1    -0.409253   0.397704  -1.029 -1.188738  0.370233   0.1518    \nmu0_3_1     0.214973   0.314431   0.684 -0.401300  0.831246   0.2471    \nsigma0_1_1  0.470529   0.340595   1.381 -0.197025  1.138083   0.0836 .  \nsigma0_2_1  0.299659   0.323106   0.927 -0.333617  0.932935   0.1769    \nsigma0_3_1  0.231906   0.254674   0.911 -0.267246  0.731058   0.1813    \nsigma0_2_2  0.744386   0.505722   1.472 -0.246811  1.735582   0.0706 .  \nsigma0_3_2  0.485843   0.352649   1.378 -0.205336  1.177023   0.0842 .  \nsigma0_3_3  0.442882   0.313556   1.412 -0.171676  1.057439   0.0789 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log-likelihood value at convergence = 21202.41\nAIC = 21262.41\nBIC = 21457.92\n\n\n\n\n[1] -0.3660337 -0.4092527  0.2149727\n\n\nParameter Estimates\n\nmu_hat\n\n[1] 0.05480875 0.09700060 0.04993973\n\nphi_hat\n\n           [,1]        [,2]        [,3]\n[1,] -0.4345060  0.02467277 -0.05454905\n[2,]  0.8417982 -0.60175178  0.10992650\n[3,] -0.3702948  0.66094491 -0.66061828\n\nsigma_hat\n\n            [,1]        [,2]         [,3]\n[1,]  0.25110408 0.020492828 -0.062261099\n[2,]  0.02049283 0.085336089  0.009575553\n[3,] -0.06226110 0.009575553  0.078206146\n\nmu0_hat\n\n[1] -0.3660337 -0.4092527  0.2149727\n\nsigma0_hat\n\n          [,1]      [,2]      [,3]\n[1,] 0.4705290 0.2996591 0.2319058\n[2,] 0.2996591 0.7443856 0.4858433\n[3,] 0.2319058 0.4858433 0.4428818\n\nbeta_var1_hat &lt;- expm::expm(phi_hat)\nbeta_var1_hat\n\n            [,1]        [,2]        [,3]\n[1,]  0.65704464 0.004621693 -0.03138432\n[2,]  0.49886539 0.570658931  0.04636742\n[3,] -0.05872866 0.355366244  0.53861155",
    "crumbs": [
      "Examples",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>The Ornstein–Uhlenbeck Model</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/references/references.html",
    "href": ".setup/quarto/references/references.html",
    "title": "References",
    "section": "",
    "text": "Boettiger, C., & Eddelbuettel, D. (2017). An introduction to\nRocker: Docker containers for R. The R\nJournal, 9(2), 527. https://doi.org/10.32614/rj-2017-065\n\n\nNüst, D., Eddelbuettel, D., Bennett, D., Cannoodt, R., Clark, D.,\nDar’oczi, G., Edmondson, M., Fay, C., Hughes, E., Kjeldgaard, L., Lopp,\nS., Marwick, B., Nolis, H., Nolis, J., Ooi, H., Ram, K., Ross, N.,\nShepherd, L., S’olymos, P., … Xiao, N. (2020). The\nRockerverse: Packages and applications for containerisation\nwith R. The R Journal, 12(1), 437. https://doi.org/10.32614/rj-2020-007\n\n\nOu, L., Hunter, M. D., & Chow, S.-M. (2019). What’s for dynr: A package for linear and nonlinear dynamic\nmodeling in R. The R Journal, 11(1), 91.\nhttps://doi.org/10.32614/rj-2019-012",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>References</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/session/session.html",
    "href": ".setup/quarto/session/session.html",
    "title": "Appendix A — Website Build Session",
    "section": "",
    "text": "Session\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: x86_64-pc-linux-gnu\nRunning under: Ubuntu 24.04.1 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Etc/UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.2    fastmap_1.2.0     cli_3.6.3.9002   \n [5] tools_4.4.2       htmltools_0.5.8.1 yaml_2.3.10       rmarkdown_2.29   \n [9] knitr_1.49        jsonlite_1.8.9    xfun_0.50         digest_0.6.37    \n[13] rlang_1.1.5       evaluate_1.0.3\n/srv/build/CONTAINER_RELEASE: 18db9a36021788d82102ed6e1f5ea075fde2f64b\n/srv/build/CONTAINER_RELEASE_MSG: This release is based on commit 18db9a36021788d82102ed6e1f5ea075fde2f64b.\n/srv/build/DOCKER_HUB_CONTAINER: docs\n/srv/build/DOCKER_HUB_USERNAME: ijapesigan\n/srv/build/GIT_HUB_REPO: docker-docs\n/srv/build/GIT_HUB_USERNAME: ijapesigan",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Website Build Session</span>"
    ]
  },
  {
    "objectID": ".setup/quarto/docker/docker.html",
    "href": ".setup/quarto/docker/docker.html",
    "title": "dynr Docker Container",
    "section": "",
    "text": "In order to facilitate the use of the dynr package, we have created an Rstudio Server Docker container based on the Rocker Project (Boettiger & Eddelbuettel, 2017; Nüst et al., 2020), with the dynr package pre-installed.\n\nWindows using WSL 2\nmacOS\nDocker Images, Containers, and Tags\nDocker Volumes\n\n\n\n\n\nBoettiger, C., & Eddelbuettel, D. (2017). An introduction to Rocker: Docker containers for R. The R Journal, 9(2), 527. https://doi.org/10.32614/rj-2017-065\n\n\nNüst, D., Eddelbuettel, D., Bennett, D., Cannoodt, R., Clark, D., Dar’oczi, G., Edmondson, M., Fay, C., Hughes, E., Kjeldgaard, L., Lopp, S., Marwick, B., Nolis, H., Nolis, J., Ooi, H., Ram, K., Ross, N., Shepherd, L., S’olymos, P., … Xiao, N. (2020). The Rockerverse: Packages and applications for containerisation with R. The R Journal, 12(1), 437. https://doi.org/10.32614/rj-2020-007",
    "crumbs": [
      "dynr Docker Container"
    ]
  }
]
[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dynr Wiki",
    "section": "",
    "text": "This website serves as a Wiki for consolidating documentation, knowledge bases, and other relevant information pertaining to the dynr package. The intention is not to supplant existing sources of information, for example, https://CRAN.R-project.org/package=dynr and https://github.com/mhunter1/dynr, but to supplement them."
  },
  {
    "objectID": ".setup/quarto/intro/intro.html#description",
    "href": ".setup/quarto/intro/intro.html#description",
    "title": "dynr: Dynamic Models with Regime-Switching",
    "section": "Description",
    "text": "Description\nIntensive longitudinal data have become increasingly prevalent in various scientific disciplines. Many such data sets are noisy, multivariate, and multi-subject in nature. The change functions may also be continuous, or continuous but interspersed with periods of discontinuities (i.e., showing regime switches). The package dynr (Dynamic Modeling in R) is an R package that implements a set of computationally efficient algorithms for handling a broad class of linear and nonlinear discrete- and continuous- time models with regime-switching properties under the constraint of linear Gaussian measurement functions. The discrete-time models can generally take on the form of a state-space or difference equation model. The continuous-time models are generally expressed as a set of ordinary or stochastic differential equations. All estimation and computations are performed in C, but users are provided with the option to specify the model of interest via a set of simple and easy-to-learn model specification functions in R. Model fitting can be performed using single-subject time series data or multiple-subject longitudinal data. Ou et al. (2019) provided a detailed introduction to the interface and more information on the algorithms."
  },
  {
    "objectID": ".setup/quarto/intro/intro.html#cran",
    "href": ".setup/quarto/intro/intro.html#cran",
    "title": "dynr: Dynamic Models with Regime-Switching",
    "section": "CRAN",
    "text": "CRAN\nThe Comprehensive R Archive Network (CRAN) release of the dynr package is available at https://CRAN.R-project.org/package=dynr."
  },
  {
    "objectID": ".setup/quarto/intro/intro.html#github",
    "href": ".setup/quarto/intro/intro.html#github",
    "title": "dynr: Dynamic Models with Regime-Switching",
    "section": "GitHub",
    "text": "GitHub\nThe development version of the dynr package is available at https://github.com/mhunter1/dynr.\n\n\n\n\nOu, L., Hunter, M. D., & Chow, S.-M. (2019). What’s for dynr: A package for linear and nonlinear dynamic modeling in R. The R Journal, 11(1), 91. https://doi.org/10.32614/rj-2019-012"
  },
  {
    "objectID": ".setup/quarto/docker/docker.html",
    "href": ".setup/quarto/docker/docker.html",
    "title": "dynr Docker Container",
    "section": "",
    "text": "In order to facilitate the use of the dynr package, we have created an Rstudio Server Docker container based on the Rocker Project (Boettiger & Eddelbuettel, 2017; Nüst et al., 2020), with the dynr package pre-installed.\n\nWindows using WSL 2\nmacOS\nDocker Images, Containers, and Tags\nDocker Volumes\n\n\n\n\n\nBoettiger, C., & Eddelbuettel, D. (2017). An introduction to Rocker: Docker containers for R. The R Journal, 9(2), 527. https://doi.org/10.32614/rj-2017-065\n\n\nNüst, D., Eddelbuettel, D., Bennett, D., Cannoodt, R., Clark, D., Dar’oczi, G., Edmondson, M., Fay, C., Hughes, E., Kjeldgaard, L., Lopp, S., Marwick, B., Nolis, H., Nolis, J., Ooi, H., Ram, K., Ross, N., Shepherd, L., S’olymos, P., … Xiao, N. (2020). The Rockerverse: Packages and applications for containerisation with R. The R Journal, 12(1), 437. https://doi.org/10.32614/rj-2020-007"
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#installing-windows-subsystem-for-linux-wsl",
    "href": ".setup/quarto/docker/docker-win.html#installing-windows-subsystem-for-linux-wsl",
    "title": "Windows using WSL 2",
    "section": "Installing Windows Subsystem for Linux (WSL)",
    "text": "Installing Windows Subsystem for Linux (WSL)\n\nIn PowerShell1, type the following:\n\nwsl --install --distribution Ubuntu\n\n\n\n\n\n\nNote\n\n\n\nThere are times when the operating system requires a restart. After restarting, when the installation is successful, a new application Ubuntu will be available. Launch this application to continue.\n\n\n\nWhen prompted:\n\nEnter new UNIX username:\nNew password:\nRetype new password:\n\nYou should see a prompt similar to the following which indicates that you are inside the newly installed Ubuntu instance. In the prompt, type exit to exit Ubuntu.\n\nUSER@HOST:~$\n\nYou might need to update the kernel. You can do this with the following:\n\nDownload the Linux kernel update package from https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\nDouble-click wsl_update_x64.msi to update the kernel.\n\nA system restart might be a good idea for all the changes to take effect.\n\nIf the above instructions fail, you might be using an older version of Windows. See https://learn.microsoft.com/en-us/windows/wsl/install-manual for more details on how to manually install WSL."
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#installing-docker-desktop",
    "href": ".setup/quarto/docker/docker-win.html#installing-docker-desktop",
    "title": "Windows using WSL 2",
    "section": "Installing Docker Desktop",
    "text": "Installing Docker Desktop\n\nDownload the the appropriate Docker Desktop for Windows from https://www.docker.com/products/docker-desktop/.\nDouble-click Desktop Installer.exe to install Docker Desktop.\nLaunch Docker Desktop.\n\nClick the Accept button to accept the terms of service to continue."
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#running-the-dynr-docker-container",
    "href": ".setup/quarto/docker/docker-win.html#running-the-dynr-docker-container",
    "title": "Windows using WSL 2",
    "section": "Running the dynr Docker Container",
    "text": "Running the dynr Docker Container\n\nLaunch Docker Desktop.\nIn PowerShell type the following to pull the latest Docker image2:\n\ndocker pull jeksterslab/dynr-rocker:latest\n\nIn PowerShell type the following to launch Rstudio Server3:\n\ndocker run --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\n\nOpen http://localhost:8787 on your web browser to launch Rstudio Server.\n\nusername: rstudio\npassword: yourpassword"
  },
  {
    "objectID": ".setup/quarto/docker/docker-win.html#footnotes",
    "href": ".setup/quarto/docker/docker-win.html#footnotes",
    "title": "Windows using WSL 2",
    "section": "",
    "text": "Run all instances of PowerShell as administration.↩︎\nReplace jeksterslab/dynr-rocker with jeksterslab/dynr-arma-rocker to use the arma branch.↩︎\nReplace jeksterslab/dynr-rocker with jeksterslab/dynr-arma-rocker to use the arma branch.↩︎"
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html#installing-docker-desktop",
    "href": ".setup/quarto/docker/docker-mac.html#installing-docker-desktop",
    "title": "macOS",
    "section": "Installing Docker Desktop",
    "text": "Installing Docker Desktop\n\nDownload the the appropriate Docker Desktop for macOS (Intel vs. M1) from https://www.docker.com/products/docker-desktop/.\nDouble-click Desktop.dmg to install Docker Desktop.\nDrag Docker.app to the Applications folder.\nLaunch Docker from the Launchpad.\n\nThe system would ask for your macOS user password.\nClick the Accept button to accept the terms of service to continue."
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html#running-the-dynr-docker-container",
    "href": ".setup/quarto/docker/docker-mac.html#running-the-dynr-docker-container",
    "title": "macOS",
    "section": "Running the dynr Docker Container",
    "text": "Running the dynr Docker Container\n\nLaunch Docker Desktop.\nType the following to launch Rstudio Server1 on your macOS terminal:\n\ndocker run --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\n\nOpen http://localhost:8787 on your web browser to launch Rstudio Server.\n\nusername: rstudio\npassword: yourpassword"
  },
  {
    "objectID": ".setup/quarto/docker/docker-mac.html#footnotes",
    "href": ".setup/quarto/docker/docker-mac.html#footnotes",
    "title": "macOS",
    "section": "",
    "text": "Replace jeksterslab/dynr-rocker with jeksterslab/dynr-arma-rocker to use the arma branch.↩︎"
  },
  {
    "objectID": ".setup/quarto/docker/docker-image-container-tag.html#footnotes",
    "href": ".setup/quarto/docker/docker-image-container-tag.html#footnotes",
    "title": "Docker Images, Containers, and Tags",
    "section": "",
    "text": "Docker Hub is the remote repository of the dynr Docker images. A Docker Hub account is not required to use the dynr Docker images in Docker Hub. However, an account is required to view details of the dynr docker images.↩︎"
  },
  {
    "objectID": ".setup/quarto/docker/docker-volumes.html",
    "href": ".setup/quarto/docker/docker-volumes.html",
    "title": "Docker Volumes",
    "section": "",
    "text": "By default files created inside the Docker container does not persist when the container is stopped. We can mount a persistent volume on your Docker container using the -v flag. The idea here is that Docker maps a volume of the local host machine to a volume inside the Docker container. Let’s say we have a folder dynr_project inside the local Documents folder. We can mount that volume using the following for Windows\ndocker run -v C:\\Users\\user\\Documents\\dynr_project:/home/rstudio/working-dir --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\nand for mac\ndocker run -v /Users/username/Documents/dynr_project:/home/rstudio/working-dir --rm -ti -e PASSWORD=yourpassword -p 127.0.0.1:8787:8787 jeksterslab/dynr-rocker\nThe directory on the left size of the colon is an existing directory on the host machine that the current user has read and write access to. The directory on the right side of the colon is the default working directory inside the Docker container. If you make changes inside the Docker container on files inside /home/rstudio/working-dir, the changes will persist on the mounted dynr_project folder. If you make changes in the dynr_project folder, they will be reflected on /home/rstudio/working-dir of the currently running container."
  },
  {
    "objectID": ".setup/quarto/examples/var.html#the-vector-autoregressive-model",
    "href": ".setup/quarto/examples/var.html#the-vector-autoregressive-model",
    "title": "Vector Autoregressive Model",
    "section": "The Vector Autoregressive Model",
    "text": "The Vector Autoregressive Model\nThe measurement model is given by\n\\[\\begin{equation}\n  \\mathbf{y}_{i, t}\n  =\n  \\boldsymbol{\\eta}_{i, t} .\n\\end{equation}\\]\nThe dynamic structure is given by\n\\[\\begin{equation}\n  \\boldsymbol{\\eta}_{i, t}\n  =\n  \\boldsymbol{\\alpha}\n  +\n  \\boldsymbol{\\beta}\n  \\boldsymbol{\\eta}_{i, t - 1}\n  +\n  \\boldsymbol{\\zeta}_{i, t}\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\boldsymbol{\\zeta}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  \\mathbf{0},\n  \\boldsymbol{\\Psi}\n  \\right)\n\\end{equation}\\]\nwhere \\(\\boldsymbol{\\eta}_{i, t}\\), \\(\\boldsymbol{\\eta}_{i, t - 1}\\), and \\(\\boldsymbol{\\zeta}_{i, t}\\) are random variables and \\(\\boldsymbol{\\alpha}\\), \\(\\boldsymbol{\\beta}\\), and \\(\\boldsymbol{\\Psi}\\) are model parameters. \\(\\boldsymbol{\\eta}_{i, t}\\) is a vector of latent variables at time \\(t\\) and individual \\(i\\), \\(\\boldsymbol{\\eta}_{i, t - 1}\\) is a vector of latent variables at \\(t - 1\\) and individual \\(i\\), and \\(\\boldsymbol{\\zeta}_{i, t}\\) is a vector of dynamic noise at time \\(t\\) and individual \\(i\\), while \\(\\boldsymbol{\\alpha}\\) is a vector of intercepts, \\(\\boldsymbol{\\beta}\\) is a matrix of autoregression and cross regression coefficients, and \\(\\boldsymbol{\\Psi}\\) is the covariance matrix of \\(\\boldsymbol{\\zeta}_{i, t}\\)."
  },
  {
    "objectID": ".setup/quarto/examples/var.html#data-generation",
    "href": ".setup/quarto/examples/var.html#data-generation",
    "title": "Vector Autoregressive Model",
    "section": "Data Generation",
    "text": "Data Generation\n\nNotation\nLet \\(t = 500\\) be the number of time points and \\(n = 10\\) be the number of individuals.\nLet the initial condition \\(\\boldsymbol{\\eta}_{0}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0 & 0 \\\\\n  0 & 1 & 0 \\\\\n  0 & 0 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the constant vector \\(\\boldsymbol{\\alpha}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\alpha}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the transition matrix \\(\\boldsymbol{\\beta}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\beta}\n=\n\\left(\n\\begin{array}{ccc}\n  0.7 & 0 & 0 \\\\\n  0.5 & 0.6 & 0 \\\\\n  -0.1 & 0.4 & 0.5 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the dynamic process noise \\(\\boldsymbol{\\Psi}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Psi}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0 & 0 \\\\\n  0 & 1 & 0 \\\\\n  0 & 0 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\n\n\nR Function Arguments\n\nn\n\n[1] 10\n\ntime\n\n[1] 500\n\nmu0\n\n[1] 0 0 0\n\nsigma0\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\nalpha\n\n[1] 0 0 0\n\nbeta\n\n     [,1] [,2] [,3]\n[1,]  0.7  0.0  0.0\n[2,]  0.5  0.6  0.0\n[3,] -0.1  0.4  0.5\n\npsi\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n\n\n\nUsing the simStateSpace::SimSSMVARFixed Function to Simulate Data\n\nif (!require(\"remotes\")) install.packages(\"remotes\")\nremotes::install_github(\"ijapesigan/simStateSpace\")\n\n\ndata &lt;- simStateSpace::SimSSMVARFixed(\n  n = n,\n  mu0 = mu0,\n  sigma0_sqrt = chol(sigma0),\n  alpha = alpha,\n  beta = beta,\n  psi_sqrt = chol(psi),\n  time = time,\n  burn_in = 0\n)\nhead(data)\n\n              y1         y2        y3 id time\n[1,] -0.53150173  0.8212527 2.2174497  1    1\n[2,]  0.03280741 -0.3981712 2.4785526  1    2\n[3,] -0.31722163  1.5413967 1.1638121  1    3\n[4,] -0.28222201  1.4683295 0.1377762  1    4\n[5,] -1.04463827  0.7687173 0.4667933  1    5\n[6,] -0.92475541  1.1649958 1.2460595  1    6"
  },
  {
    "objectID": ".setup/quarto/examples/var.html#model-fitting",
    "href": ".setup/quarto/examples/var.html#model-fitting",
    "title": "Vector Autoregressive Model",
    "section": "Model Fitting",
    "text": "Model Fitting\n\nPrepare Data\n\ndynr_data &lt;- dynr::dynr.data(\n  data = data,\n  id = \"id\",\n  time = \"time\",\n  observed = c(\"y1\", \"y2\", \"y3\")\n)\n\n\n\nPrepare Initial Condition\n\ndynr_initial &lt;- dynr::prep.initial(\n  values.inistate = c(0, 0, 0),\n  params.inistate = c(\"mu0_1\", \"mu0_2\", \"mu0_3\"),\n  values.inicov = diag(3),\n  params.inicov = matrix(\n    data = c(\n      \"sigma0_11\", \"sigma0_12\", \"sigma0_13\",\n      \"sigma0_12\", \"sigma0_22\", \"sigma0_23\",\n      \"sigma0_13\", \"sigma0_23\", \"sigma0_33\"\n    ),\n    nrow = 3\n  )\n)\n\n\n\nPrepare Measurement Model\n\ndynr_measurement &lt;- dynr::prep.measurement(\n  values.load = diag(3),\n  params.load = matrix(data = \"fixed\", nrow = 3, ncol = 3),\n  state.names = c(\"eta_1\", \"eta_2\", \"eta_3\"),\n  obs.names = c(\"y1\", \"y2\", \"y3\")\n)\n\n\n\nPrepare Dynamic Process\n\ndynr_dynamics &lt;- dynr::prep.formulaDynamics(\n  formula = list(\n    eta_1 ~ alpha_1 * 1 + beta_11 * eta_1 + beta_12 * eta_2 + beta_13 * eta_3,\n    eta_2 ~ alpha_2 * 1 + beta_21 * eta_1 + beta_22 * eta_2 + beta_23 * eta_3,\n    eta_3 ~ alpha_3 * 1 + beta_31 * eta_1 + beta_32 * eta_2 + beta_33 * eta_3\n  ),\n  startval = c(\n    alpha_1 = 0, alpha_2 = 0, alpha_3 = 0,\n    beta_11 = 0, beta_12 = 0, beta_13 = 0,\n    beta_21 = 0, beta_22 = 0, beta_23 = 0,\n    beta_31 = 0, beta_32 = 0, beta_33 = 0\n  ),\n  isContinuousTime = FALSE\n)\n\n\n\nPrepare Process Noise\n\ndynr_noise &lt;- dynr::prep.noise(\n  values.latent = diag(3),\n  params.latent = matrix(\n    data = c(\n      \"psi_11\", \"psi_12\", \"psi_13\",\n      \"psi_12\", \"psi_22\", \"psi_23\",\n      \"psi_13\", \"psi_23\", \"psi_33\"\n    ),\n    nrow = 3\n  ),\n  values.observed = matrix(data = 0, nrow = 3, ncol = 3),\n  params.observed = matrix(data = \"fixed\", nrow = 3, ncol = 3)\n)\n\n\n\nPrepare the Model\n\nmodel &lt;- dynr::dynr.model(\n  data = dynr_data,\n  initial = dynr_initial,\n  measurement = dynr_measurement,\n  dynamics = dynr_dynamics,\n  noise = dynr_noise,\n  outfile = \"var.c\"\n)\n\n\ndynr::plotFormula(\n  dynrModel = model,\n  ParameterAs = model$\"param.names\",\n  printDyn = TRUE,\n  printMeas = TRUE\n)\n\n\n\n\n\n\nFit the Model\n\nresults &lt;- dynr::dynr.cook(\n  model,\n  debug_flag = TRUE,\n  verbose = FALSE\n)\n\n[1] \"Get ready!!!!\"\nusing C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’\nOptimization function called.\nStarting Hessian calculation ...\nFinished Hessian calculation.\nOriginal exit flag:  3 \nModified exit flag:  3 \nOptimization terminated successfully: ftol_rel or ftol_abs was reached. \nOriginal fitted parameters:  -0.01496695 -0.008388628 0.007902923 0.6906446 \n0.01484089 -0.003228517 0.4856372 0.6205177 -0.008203662 -0.113009 0.4165596 \n0.4950765 -0.01730149 -0.024154 -0.01538862 0.007159089 -0.01518432 \n-0.003750755 0.02465033 -0.01822517 0.5138599 -0.09631148 0.1127464 0.2024329 \n0.184493 0.009545498 -0.0634222 \n\nTransformed fitted parameters:  -0.01496695 -0.008388628 0.007902923 0.6906446 \n0.01484089 -0.003228517 0.4856372 0.6205177 -0.008203662 -0.113009 0.4165596 \n0.4950765 0.9828473 -0.0237397 -0.01512467 1.007758 -0.01492809 0.9967212 \n0.02465033 -0.01822517 0.5138599 0.9081811 0.1023942 0.1838457 1.214153 \n0.03220745 0.9758731 \n\nDoing end processing\nSuccessful trial\nTotal Time: 3.441422 \nBackend Time: 3.432563"
  },
  {
    "objectID": ".setup/quarto/examples/var.html#summary",
    "href": ".setup/quarto/examples/var.html#summary",
    "title": "Vector Autoregressive Model",
    "section": "Summary",
    "text": "Summary\n\nsummary(results)\n\nCoefficients:\n           Estimate Std. Error t value  ci.lower  ci.upper Pr(&gt;|t|)    \nalpha_1   -0.014967   0.014052  -1.065 -0.042509  0.012575   0.1434    \nalpha_2   -0.008389   0.014227  -0.590 -0.036274  0.019496   0.2777    \nalpha_3    0.007903   0.014151   0.558 -0.019833  0.035639   0.2883    \nbeta_11    0.690645   0.011356  60.820  0.668388  0.712901   &lt;2e-16 ***\nbeta_12    0.014841   0.009433   1.573 -0.003647  0.033328   0.0578 .  \nbeta_13   -0.003229   0.009593  -0.337 -0.022030  0.015573   0.3682    \nbeta_21    0.485637   0.011497  42.239  0.463103  0.508171   &lt;2e-16 ***\nbeta_22    0.620518   0.009551  64.969  0.601798  0.639237   &lt;2e-16 ***\nbeta_23   -0.008204   0.009714  -0.845 -0.027242  0.010835   0.1992    \nbeta_31   -0.113009   0.011436  -9.882 -0.135423 -0.090595   &lt;2e-16 ***\nbeta_32    0.416560   0.009499  43.851  0.397941  0.435178   &lt;2e-16 ***\nbeta_33    0.495077   0.009660  51.249  0.476143  0.514010   &lt;2e-16 ***\npsi_11     0.982847   0.019677  49.949  0.944281  1.021413   &lt;2e-16 ***\npsi_12    -0.023740   0.014093  -1.684 -0.051362  0.003882   0.0461 *  \npsi_13    -0.015125   0.014013  -1.079 -0.042589  0.012340   0.1402    \npsi_22     1.007758   0.020173  49.957  0.968221  1.047296   &lt;2e-16 ***\npsi_23    -0.014928   0.014191  -1.052 -0.042741  0.012885   0.1464    \npsi_33     0.996721   0.019958  49.941  0.957604  1.035839   &lt;2e-16 ***\nmu0_1      0.024650   0.301226   0.082 -0.565742  0.615042   0.4674    \nmu0_2     -0.018225   0.350522  -0.052 -0.705237  0.668786   0.4793    \nmu0_3      0.513860   0.313076   1.641 -0.099758  1.127478   0.0504 .  \nsigma0_11  0.908181   0.406870   2.232  0.110731  1.705631   0.0128 *  \nsigma0_12  0.102394   0.333790   0.307 -0.551823  0.756611   0.3795    \nsigma0_13  0.183846   0.303623   0.606 -0.411245  0.778936   0.2724    \nsigma0_22  1.214153   0.540907   2.245  0.153995  2.274311   0.0124 *  \nsigma0_23  0.032207   0.344624   0.093 -0.643242  0.707657   0.4628    \nsigma0_33  0.975873   0.438297   2.227  0.116826  1.834920   0.0130 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log-likelihood value at convergence = 42499.82\nAIC = 42553.82\nBIC = 42729.79\n\n\n\nEstimated Coefficients\n\nalpha_hat\n\n[1] -0.014966945 -0.008388628  0.007902923\n\nbeta_hat\n\n           [,1]       [,2]         [,3]\n[1,]  0.6906446 0.01484089 -0.003228517\n[2,]  0.4856372 0.62051774 -0.008203662\n[3,] -0.1130090 0.41655958  0.495076528\n\npsi_hat\n\n            [,1]        [,2]        [,3]\n[1,]  0.98284732 -0.02373970 -0.01512467\n[2,] -0.02373970  1.00775818 -0.01492809\n[3,] -0.01512467 -0.01492809  0.99672124\n\nmu0_hat\n\n[1]  0.02465033 -0.01822517  0.51385992\n\nsigma0_hat\n\n          [,1]       [,2]       [,3]\n[1,] 0.9081811 0.10239418 0.18384572\n[2,] 0.1023942 1.21415314 0.03220745\n[3,] 0.1838457 0.03220745 0.97587313\n\n\n\n\nDiscrepancy Between Estimated and Population Coefficients\n\nabs(alpha - alpha_hat)\n\n[1] 0.014966945 0.008388628 0.007902923\n\nabs(beta - beta_hat)\n\n            [,1]       [,2]        [,3]\n[1,] 0.009355395 0.01484089 0.003228517\n[2,] 0.014362829 0.02051774 0.008203662\n[3,] 0.013009036 0.01655958 0.004923472\n\nabs(psi - psi_hat)\n\n           [,1]        [,2]        [,3]\n[1,] 0.01715268 0.023739697 0.015124667\n[2,] 0.02373970 0.007758185 0.014928091\n[3,] 0.01512467 0.014928091 0.003278762\n\nabs(mu0 - mu0_hat)\n\n[1] 0.02465033 0.01822517 0.51385992\n\nabs(sigma0 - sigma0_hat)\n\n           [,1]       [,2]       [,3]\n[1,] 0.09181891 0.10239418 0.18384572\n[2,] 0.10239418 0.21415314 0.03220745\n[3,] 0.18384572 0.03220745 0.02412687"
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#the-ornsteinuhlenbeck-model",
    "href": ".setup/quarto/examples/ou.html#the-ornsteinuhlenbeck-model",
    "title": "Ornstein–Uhlenbeck Model",
    "section": "The Ornstein–Uhlenbeck Model",
    "text": "The Ornstein–Uhlenbeck Model\nThe measurement model is given by\n\\[\\begin{equation}\n  \\mathbf{y}_{i, t}\n  =\n  \\boldsymbol{\\nu}\n  +\n  \\boldsymbol{\\Lambda}\n  \\boldsymbol{\\eta}_{i, t}\n  +\n  \\boldsymbol{\\varepsilon}_{i, t}\n  \\quad\n  \\mathrm{with}\n  \\quad\n  \\boldsymbol{\\varepsilon}_{i, t}\n  \\sim\n  \\mathcal{N}\n  \\left(\n  \\mathbf{0},\n  \\boldsymbol{\\Theta}\n  \\right)\n\\end{equation}\\]\nwhere \\(\\mathbf{y}_{i, t}\\), \\(\\boldsymbol{\\eta}_{i, t}\\), and \\(\\boldsymbol{\\varepsilon}_{i, t}\\) are random variables and \\(\\boldsymbol{\\nu}\\), \\(\\boldsymbol{\\Lambda}\\), and \\(\\boldsymbol{\\Theta}\\) are model parameters. \\(\\mathbf{y}_{i, t}\\) is a vector of observed random variables at time \\(t\\) and individual \\(i\\), \\(\\boldsymbol{\\eta}_{i, t}\\) is a vector of latent random variables at time \\(t\\) and individual \\(i\\), and \\(\\boldsymbol{\\varepsilon}_{i, t}\\) is a vector of random measurement errors at time \\(t\\) and individual \\(i\\), while \\(\\boldsymbol{\\nu}\\) is a vector of intercept, \\(\\boldsymbol{\\Lambda}\\) is a matrix of factor loadings, and \\(\\boldsymbol{\\Theta}\\) is the covariance matrix of \\(\\boldsymbol{\\varepsilon}\\).\nThe dynamic structure is given by\n\\[\\begin{equation}\n  \\mathrm{d} \\boldsymbol{\\eta}_{i, t}\n  =\n  \\boldsymbol{\\Phi}\n  \\left(\n  \\boldsymbol{\\mu}\n  -\n  \\boldsymbol{\\eta}_{i, t}\n  \\right)\n  \\mathrm{d}t\n  +\n  \\boldsymbol{\\Sigma}^{\\frac{1}{2}}\n  \\mathrm{d}\n  \\mathbf{W}_{i, t}\n\\end{equation}\\]\nwhere \\(\\boldsymbol{\\mu}\\) is the long-term mean or equilibrium level, \\(\\boldsymbol{\\Phi}\\) is the rate of mean reversion, determining how quickly the variable returns to its mean, \\(\\boldsymbol{\\Sigma}\\) is the matrix of volatility or randomness in the process, and \\(\\mathrm{d}\\boldsymbol{W}\\) is a Wiener process or Brownian motion, which represents random fluctuations."
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#data-generation",
    "href": ".setup/quarto/examples/ou.html#data-generation",
    "title": "Ornstein–Uhlenbeck Model",
    "section": "Data Generation",
    "text": "Data Generation\n\nNotation\nLet \\(t = 500\\) be the number of time points and \\(n = 10\\) be the number of individuals.\nLet the measurement model intecept vector \\(\\boldsymbol{\\nu}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\nu}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the factor loadings matrix \\(\\boldsymbol{\\Lambda}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Lambda}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0 & 0 \\\\\n  0 & 1 & 0 \\\\\n  0 & 0 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the measurement error covariance matrix \\(\\boldsymbol{\\Theta}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Theta}\n=\n\\left(\n\\begin{array}{ccc}\n  0.5 & 0 & 0 \\\\\n  0 & 0.5 & 0 \\\\\n  0 & 0 & 0.5 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the initial condition \\(\\boldsymbol{\\eta}_{0}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\eta}_{0} \\sim \\mathcal{N} \\left( \\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}, \\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0} \\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\mu}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right)\n\\end{equation}\\]\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}_{\\boldsymbol{\\eta} \\mid 0}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0 & 0 \\\\\n  0 & 1 & 0 \\\\\n  0 & 0 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the long-term mean vector \\(\\boldsymbol{\\mu}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\mu}\n=\n\\left(\n\\begin{array}{c}\n  0 \\\\\n  0 \\\\\n  0 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the rate of mean reversion matrix \\(\\boldsymbol{\\Phi}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Phi}\n=\n\\left(\n\\begin{array}{ccc}\n  0.357 & 0 & 0 \\\\\n  -0.771 & 0.511 & 0 \\\\\n  0.45 & -0.729 & 0.693 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet the dynamic process noise covariance matrix \\(\\boldsymbol{\\Sigma}\\) be given by\n\\[\\begin{equation}\n\\boldsymbol{\\Sigma}\n=\n\\left(\n\\begin{array}{ccc}\n  1 & 0 & 0 \\\\\n  0 & 1 & 0 \\\\\n  0 & 0 & 1 \\\\\n\\end{array}\n\\right) .\n\\end{equation}\\]\nLet \\(\\Delta_{t} = 0.1\\).\n\n\nR Function Arguments\n\nn\n\n[1] 10\n\ntime\n\n[1] 500\n\ndelta_t\n\n[1] 0.1\n\nmu0\n\n[1] 0 0 0\n\nsigma0\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\nmu\n\n[1] 0 0 0\n\nphi\n\n       [,1]   [,2]  [,3]\n[1,]  0.357  0.000 0.000\n[2,] -0.771  0.511 0.000\n[3,]  0.450 -0.729 0.693\n\nsigma\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\nnu\n\n[1] 0 0 0\n\nlambda\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\ntheta\n\n     [,1] [,2] [,3]\n[1,]  0.5  0.0  0.0\n[2,]  0.0  0.5  0.0\n[3,]  0.0  0.0  0.5\n\n\n\n\nUsing the simStateSpace::SimSSMVARFixed Function to Simulate Data\n\nif (!require(\"remotes\")) install.packages(\"remotes\")\nremotes::install_github(\"ijapesigan/simStateSpace\")\n\n\ndata &lt;- simStateSpace::SimSSMOUFixed(\n  n = n,\n  mu0 = mu0,\n  sigma0_sqrt = chol(sigma0),\n  mu = mu,\n  phi = phi,\n  sigma_sqrt = chol(sigma),\n  nu = nu,\n  lambda = lambda,\n  theta_sqrt = chol(theta),\n  delta_t = delta_t,\n  time = time,\n  burn_in = 0\n)\nhead(data)\n\n             y1        y2       y3 id time\n[1,] -0.2452235 0.3791894 2.916196  1  0.0\n[2,] -0.6408937 1.7824870 1.400803  1  0.1\n[3,] -0.9755917 2.0512793 2.498214  1  0.2\n[4,] -2.5120801 0.7969752 2.234649  1  0.3\n[5,] -1.7204259 0.6404276 2.053562  1  0.4\n[6,]  0.4753620 1.3252011 2.114403  1  0.5"
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#model-fitting",
    "href": ".setup/quarto/examples/ou.html#model-fitting",
    "title": "Ornstein–Uhlenbeck Model",
    "section": "Model Fitting",
    "text": "Model Fitting\n\nPrepare Data\n\ndynr_data &lt;- dynr::dynr.data(\n  dataframe = data,\n  id = \"id\",\n  time = \"time\",\n  observed = c(\"y1\", \"y2\", \"y3\")\n)\n\n\n\nPrepare Initial Condition\n\ndynr_initial &lt;- dynr::prep.initial(\n  values.inistate = c(0, 0, 0),\n  params.inistate = c(\"mu0_1\", \"mu0_2\", \"mu0_3\"),\n  values.inicov = diag(3),\n  params.inicov = matrix(\n    data = c(\n      \"sigma0_11\", \"sigma0_12\", \"sigma0_13\",\n      \"sigma0_12\", \"sigma0_22\", \"sigma0_23\",\n      \"sigma0_13\", \"sigma0_23\", \"sigma0_33\"\n    ),\n    nrow = 3\n  )\n)\n\n\n\nPrepare Measurement Model\n\ndynr_measurement &lt;- dynr::prep.measurement(\n  values.load = diag(3),\n  params.load = matrix(data = \"fixed\", nrow = 3, ncol = 3),\n  state.names = c(\"eta_1\", \"eta_2\", \"eta_3\"),\n  obs.names = c(\"y1\", \"y2\", \"y3\")\n)\n\n\n\nPrepare Dynamic Process\n\ndynr_dynamics &lt;- dynr::prep.formulaDynamics(\n  formula = list(\n    eta_1 ~ phi_11 * (mu_1 - eta_1) + phi_12 * (mu_2 - eta_2) + phi_13 * (mu_3 - eta_3),\n    eta_2 ~ phi_21 * (mu_1 - eta_1) + phi_22 * (mu_2 - eta_2) + phi_23 * (mu_3 - eta_3),\n    eta_3 ~ phi_31 * (mu_1 - eta_1) + phi_32 * (mu_2 - eta_2) + phi_33 * (mu_3 - eta_3)\n  ),\n  startval = c(\n    mu_1 = 0, mu_2 = 0, mu_3 = 0,\n    phi_11 = 0, phi_12 = 0, phi_13 = 0,\n    phi_21 = 0, phi_22 = 0, phi_23 = 0,\n    phi_31 = 0, phi_32 = 0, phi_33 = 0\n  ),\n  isContinuousTime = TRUE\n)\n\n\n\nPrepare Process Noise\n\ndynr_noise &lt;- dynr::prep.noise(\n  values.latent = diag(3),\n  params.latent = matrix(\n    data = c(\n      \"sigma_11\", \"sigma_12\", \"sigma_13\",\n      \"sigma_12\", \"sigma_22\", \"sigma_23\",\n      \"sigma_13\", \"sigma_23\", \"sigma_33\"\n    ),\n    nrow = 3\n  ),\n  values.observed = diag(3),\n  params.observed = matrix(\n    data = c(\n      \"theta_11\", \"fixed\", \"fixed\",\n      \"fixed\", \"theta_22\", \"fixed\",\n      \"fixed\", \"fixed\", \"theta_33\"\n    ),\n    nrow = 3\n  )\n)\n\n\n\nPrepare the Model\n\nmodel &lt;- dynr::dynr.model(\n  data = dynr_data,\n  initial = dynr_initial,\n  measurement = dynr_measurement,\n  dynamics = dynr_dynamics,\n  noise = dynr_noise,\n  outfile = \"ou.c\"\n)\n\n\ndynr::plotFormula(\n  dynrModel = model,\n  ParameterAs = model$\"param.names\",\n  printDyn = TRUE,\n  printMeas = TRUE\n)\n\n\n\n\n\n\nFit the Model\n\nresults &lt;- dynr::dynr.cook(\n  model,\n  debug_flag = TRUE,\n  verbose = FALSE\n)\n\n[1] \"Get ready!!!!\"\nusing C compiler: ‘gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0’\nOptimization function called.\nStarting Hessian calculation ...\nFinished Hessian calculation.\nOriginal exit flag:  3 \nModified exit flag:  3 \nOptimization terminated successfully: ftol_rel or ftol_abs was reached. \nOriginal fitted parameters:  0.05819018 0.1433144 0.1342999 0.4260487 \n0.01930698 -0.02695342 -0.7310359 0.5022142 -0.02825801 0.4161618 -0.6548961 \n0.6633814 0.07430425 -0.03152653 -0.09594437 0.08063581 -0.06175122 -0.08705657 \n-0.7066296 -0.7452173 -0.7016791 0.1857025 0.1359963 0.584558 0.1100473 \n0.136341 -0.3925102 0.3369589 -0.09260117 -0.03895944 \n\nTransformed fitted parameters:  0.05819018 0.1433144 0.1342999 0.4260487 \n0.01930698 -0.02695342 -0.7310359 0.5022142 -0.02825801 0.4161618 -0.6548961 \n0.6633814 1.077134 -0.03395832 -0.103345 1.085047 -0.06367873 0.930674 0.493304 \n0.4746311 0.4957522 0.1857025 0.1359963 0.584558 1.116331 0.1522017 -0.4381712 \n1.421433 -0.1894454 1.145787 \n\nDoing end processing\nSuccessful trial\nTotal Time: 6.306084 \nBackend Time: 6.296723"
  },
  {
    "objectID": ".setup/quarto/examples/ou.html#summary",
    "href": ".setup/quarto/examples/ou.html#summary",
    "title": "Ornstein–Uhlenbeck Model",
    "section": "Summary",
    "text": "Summary\n\nsummary(results)\n\nCoefficients:\n            Estimate Std. Error t value   ci.lower   ci.upper Pr(&gt;|t|)    \nmu_1       0.0581902  0.1094601   0.532 -0.1563477  0.2727281   0.2975    \nmu_2       0.1433144  0.1914894   0.748 -0.2319980  0.5186268   0.2271    \nmu_3       0.1342999  0.1468197   0.915 -0.1534615  0.4220613   0.1802    \nphi_11     0.4260487  0.0807366   5.277  0.2678079  0.5842896   &lt;2e-16 ***\nphi_12     0.0193070  0.0610358   0.316 -0.1003210  0.1389349   0.3759    \nphi_13    -0.0269534  0.0568289  -0.474 -0.1383359  0.0844291   0.3177    \nphi_21    -0.7310359  0.0772095  -9.468 -0.8823637 -0.5797080   &lt;2e-16 ***\nphi_22     0.5022142  0.0630378   7.967  0.3786624  0.6257661   &lt;2e-16 ***\nphi_23    -0.0282580  0.0581572  -0.486 -0.1422441  0.0857281   0.3135    \nphi_31     0.4161618  0.0716607   5.807  0.2757094  0.5566143   &lt;2e-16 ***\nphi_32    -0.6548961  0.0572859 -11.432 -0.7671745 -0.5426178   &lt;2e-16 ***\nphi_33     0.6633814  0.0557616  11.897  0.5540906  0.7726721   &lt;2e-16 ***\nsigma_11   1.0771345  0.0937844  11.485  0.8933205  1.2609484   &lt;2e-16 ***\nsigma_12  -0.0339583  0.0565937  -0.600 -0.1448798  0.0769632   0.2743    \nsigma_13  -0.1033450  0.0530353  -1.949 -0.2072923  0.0006023   0.0257 *  \nsigma_22   1.0850466  0.0866814  12.518  0.9151542  1.2549391   &lt;2e-16 ***\nsigma_23  -0.0636787  0.0512827  -1.242 -0.1641910  0.0368335   0.1072    \nsigma_33   0.9306740  0.0762804  12.201  0.7811673  1.0801808   &lt;2e-16 ***\ntheta_11   0.4933040  0.0138743  35.555  0.4661109  0.5204971   &lt;2e-16 ***\ntheta_22   0.4746311  0.0132991  35.689  0.4485654  0.5006969   &lt;2e-16 ***\ntheta_33   0.4957522  0.0134127  36.961  0.4694638  0.5220406   &lt;2e-16 ***\nmu0_1      0.1857025  0.3633431   0.511 -0.5264369  0.8978420   0.3047    \nmu0_2      0.1359963  0.3962663   0.343 -0.6406714  0.9126640   0.3657    \nmu0_3      0.5845580  0.3725108   1.569 -0.1455497  1.3146656   0.0583 .  \nsigma0_11  1.1163309  0.5797349   1.926 -0.0199286  2.2525903   0.0271 *  \nsigma0_12  0.1522017  0.4649933   0.327 -0.7591684  1.0635717   0.3717    \nsigma0_13 -0.4381712  0.4297410  -1.020 -1.2804480  0.4041056   0.1540    \nsigma0_22  1.4214328  0.7131262   1.993  0.0237311  2.8191345   0.0231 *  \nsigma0_23 -0.1894454  0.4633860  -0.409 -1.0976652  0.7187743   0.3413    \nsigma0_33  1.1457872  0.5704642   2.009  0.0276979  2.2638765   0.0223 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n-2 log-likelihood value at convergence = 37942.26\nAIC = 38002.26\nBIC = 38197.78\n\n\n\n\n[1] 0.1857025 0.1359963 0.5845580\n\n\n\nEstimated Coefficients\n\nmu_hat\n\n[1] 0.05819018 0.14331437 0.13429986\n\nphi_hat\n\n           [,1]        [,2]        [,3]\n[1,]  0.4260487  0.01930698 -0.02695342\n[2,] -0.7310359  0.50221424 -0.02825801\n[3,]  0.4161618 -0.65489615  0.66338137\n\nsigma_hat\n\n            [,1]        [,2]        [,3]\n[1,]  1.07713448 -0.03395832 -0.10334499\n[2,] -0.03395832  1.08504664 -0.06367873\n[3,] -0.10334499 -0.06367873  0.93067404\n\nmu0_hat\n\n[1] 0.1857025 0.1359963 0.5845580\n\nsigma0_hat\n\n           [,1]       [,2]       [,3]\n[1,]  1.1163309  0.1522017 -0.4381712\n[2,]  0.1522017  1.4214328 -0.1894454\n[3,] -0.4381712 -0.1894454  1.1457872\n\nbeta_var1_hat &lt;- as.matrix(\n  Matrix::expm(-1 * phi_hat)\n)\nbeta_var1_hat\n\n           [,1]         [,2]       [,3]\n[1,]  0.6465266 -0.006935891 0.01549769\n[2,]  0.4559089  0.607415317 0.02158302\n[3,] -0.1008299  0.368136316 0.51825348\n\n\n\n\nDiscrepancy Between Estimated and Population Coefficients\n\nabs(mu - mu_hat)\n\n[1] 0.05819018 0.14331437 0.13429986\n\nabs(phi - phi_hat)\n\n           [,1]        [,2]       [,3]\n[1,] 0.06904874 0.019306976 0.02695342\n[2,] 0.03996414 0.008785764 0.02825801\n[3,] 0.03383818 0.074103850 0.02961863\n\nabs(beta_var1 - beta_var1_hat)\n\n             [,1]        [,2]       [,3]\n[1,] 0.0532458943 0.006935891 0.01549769\n[2,] 0.0441251876 0.007519934 0.02158302\n[3,] 0.0007914931 0.031699306 0.01817988\n\nabs(sigma - sigma_hat)\n\n           [,1]       [,2]       [,3]\n[1,] 0.07713448 0.03395832 0.10334499\n[2,] 0.03395832 0.08504664 0.06367873\n[3,] 0.10334499 0.06367873 0.06932596\n\nabs(mu0 - mu0_hat)\n\n[1] 0.1857025 0.1359963 0.5845580\n\nabs(sigma0 - sigma0_hat)\n\n          [,1]      [,2]      [,3]\n[1,] 0.1163309 0.1522017 0.4381712\n[2,] 0.1522017 0.4214328 0.1894454\n[3,] 0.4381712 0.1894454 0.1457872"
  },
  {
    "objectID": ".setup/quarto/references/references.html",
    "href": ".setup/quarto/references/references.html",
    "title": "References",
    "section": "",
    "text": "Boettiger, C., & Eddelbuettel, D. (2017). An introduction to\nRocker: Docker containers for R. The R\nJournal, 9(2), 527. https://doi.org/10.32614/rj-2017-065\n\n\nNüst, D., Eddelbuettel, D., Bennett, D., Cannoodt, R., Clark, D.,\nDar’oczi, G., Edmondson, M., Fay, C., Hughes, E., Kjeldgaard, L., Lopp,\nS., Marwick, B., Nolis, H., Nolis, J., Ooi, H., Ram, K., Ross, N.,\nShepherd, L., S’olymos, P., … Xiao, N. (2020). The\nRockerverse: Packages and applications for containerisation\nwith R. The R Journal, 12(1), 437. https://doi.org/10.32614/rj-2020-007\n\n\nOu, L., Hunter, M. D., & Chow, S.-M. (2019). What’s for dynr: A package for linear and nonlinear dynamic\nmodeling in R. The R Journal, 11(1), 91.\nhttps://doi.org/10.32614/rj-2019-012"
  },
  {
    "objectID": ".setup/quarto/session/session.html#session",
    "href": ".setup/quarto/session/session.html#session",
    "title": "Appendix A — Website Build Session",
    "section": "Session",
    "text": "Session\n\nsessionInfo()\n\nR version 4.3.1 (2023-06-16)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 22.04.3 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Etc/UTC\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.2 compiler_4.3.1    fastmap_1.1.1     cli_3.6.1.9000   \n [5] tools_4.3.1       htmltools_0.5.6.1 rstudioapi_0.15.0 yaml_2.3.7       \n [9] rmarkdown_2.25    knitr_1.44        jsonlite_1.8.7    xfun_0.40        \n[13] digest_0.6.33     rlang_1.1.1       evaluate_0.22    \n\n\n\n\n/srv/build/CONTAINER_RELEASE: 8852ba13f5b05bc5ea02a5f491e4b3354e6f6771\n/srv/build/CONTAINER_RELEASE_MSG: This release is based on commit 8852ba13f5b05bc5ea02a5f491e4b3354e6f6771.\n/srv/build/DOCKER_HUB_CONTAINER: docs\n/srv/build/DOCKER_HUB_USERNAME: ijapesigan\n/srv/build/GIT_HUB_REPO: docker-docs\n/srv/build/GIT_HUB_USERNAME: ijapesigan"
  }
]